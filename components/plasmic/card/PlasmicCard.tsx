// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sZLRCyi9YYe7t6BG9GcNjp
// Component: rLbuUAjAIM2Z

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Image from "../../Image"; // plasmic-import: p-kJ8jBM6L2n/component
import Icon from "../../Icon"; // plasmic-import: mP9hJWXFNN9j/component
import Title from "../../Title"; // plasmic-import: HXMutnkmSvNq/component
import Kicker from "../../Kicker"; // plasmic-import: qnV728Aa_F0x/component
import Headline from "../../Headline"; // plasmic-import: NdtUkXEo8LWs/component
import SubHeadline from "../../SubHeadline"; // plasmic-import: EH1rm_aNnjkh/component
import Content from "../../Content"; // plasmic-import: -OzGQ9WYy-qh/component
import ListGroup from "../../ListGroup"; // plasmic-import: qdCxro9aMvJ3/component
import ListItem from "../../ListItem"; // plasmic-import: HmsKVTz2YTwg/component
import Button from "../../Button"; // plasmic-import: 3BnfwULcRUyf/component
import Separator from "../../Separator"; // plasmic-import: iWSZkUWMNfpu/component
import SocialIcons from "../../SocialIcons"; // plasmic-import: TAvf7amAzDVw/component
import ShareIcons from "../../ShareIcons"; // plasmic-import: TTh1AdLIJ6Pk/component
import ContactIcons from "../../ContactIcons"; // plasmic-import: FW0XE2bZQ7j3/component

import { ModeValue, useMode } from "../core/PlasmicGlobalVariant__Mode"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../core/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_core_css from "../core/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_semantic_css from "../semantic/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import plasmic_typography_css from "../typography/plasmic.module.css"; // plasmic-import: rs6Egi3bpxgrd3P2FjjZpt/projectcss
import plasmic_title_css from "../title/plasmic.module.css"; // plasmic-import: 77r5g6Swry3x5EDhnHGHyj/projectcss
import plasmic_kicker_css from "../kicker/plasmic.module.css"; // plasmic-import: fBeERBQAnyanAaLZ4nhRvg/projectcss
import plasmic_headline_css from "../headline/plasmic.module.css"; // plasmic-import: gXd6w7L89NWPNeJmpaYS3W/projectcss
import plasmic_sub_headline_css from "../sub_headline/plasmic.module.css"; // plasmic-import: 55QiaDppxCP7g9b2J75qMu/projectcss
import plasmic_image_css from "../image/plasmic.module.css"; // plasmic-import: d4FLWyib3U2TEbmJ38D5i3/projectcss
import plasmic_content_css from "../content/plasmic.module.css"; // plasmic-import: xpyP1X2yhd8ZY24SVBFr1E/projectcss
import plasmic_button_css from "../button/plasmic.module.css"; // plasmic-import: 4JFyEcvXaxQ6TZ3SJQYzp6/projectcss
import plasmic_list_group_css from "../list_group/plasmic.module.css"; // plasmic-import: vdyuckzTfD3wQ2e6DnsVHo/projectcss
import plasmic_list_item_css from "../list_item/plasmic.module.css"; // plasmic-import: fKizj5juSSuZK31zh3BBJE/projectcss
import plasmic_icon_css from "../icon/plasmic.module.css"; // plasmic-import: nVTL6BvP7Knk1RSNkBbJCm/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sZLRCyi9YYe7t6BG9GcNjp/projectcss
import sty from "./PlasmicCard.module.css"; // plasmic-import: rLbuUAjAIM2Z/css

import FaBarssvgIcon from "./icons/PlasmicIcon__FaBarssvg"; // plasmic-import: V7i3j0FYi-np/icon
import FaChecksvgIcon from "./icons/PlasmicIcon__FaChecksvg"; // plasmic-import: z-26l-wzNdaW/icon
import FaArrowRightsvgIcon from "./icons/PlasmicIcon__FaArrowRightsvg"; // plasmic-import: b3R8ImTLzJy8/icon
import FaEnvelopeRegularsvgIcon from "./icons/PlasmicIcon__FaEnvelopeRegularsvg"; // plasmic-import: Xr56P-9BwD6C/icon
import FaXTwittersvgIcon from "./icons/PlasmicIcon__FaXTwittersvg"; // plasmic-import: bTPKng1WKjBz/icon
import FaMastodonsvgIcon from "./icons/PlasmicIcon__FaMastodonsvg"; // plasmic-import: A2ygw7emYprx/icon
import FaTiktoksvgIcon from "./icons/PlasmicIcon__FaTiktoksvg"; // plasmic-import: MOQDcFdOe00P/icon
import FaSnapchatsvgIcon from "./icons/PlasmicIcon__FaSnapchatsvg"; // plasmic-import: buoaojasRk9v/icon
import FaThreadssvgIcon from "./icons/PlasmicIcon__FaThreadssvg"; // plasmic-import: vP64Je-y8XMI/icon
import FaInstagramsvgIcon from "./icons/PlasmicIcon__FaInstagramsvg"; // plasmic-import: CM50R89Af60u/icon
import FaLinkedinInsvgIcon from "./icons/PlasmicIcon__FaLinkedinInsvg"; // plasmic-import: wxMTmOAndX0N/icon
import FaFacebookFsvgIcon from "./icons/PlasmicIcon__FaFacebookFsvg"; // plasmic-import: hz-cUvzREt33/icon
import FaSquarePinterestsvgIcon from "./icons/PlasmicIcon__FaSquarePinterestsvg"; // plasmic-import: tgyJjBgLxqHj/icon
import FaWhatsappsvgIcon from "./icons/PlasmicIcon__FaWhatsappsvg"; // plasmic-import: UgYOS_zbbTnH/icon
import FaTelegramsvgIcon from "./icons/PlasmicIcon__FaTelegramsvg"; // plasmic-import: 573fgHNmj2hP/icon
import FaDiscordsvgIcon from "./icons/PlasmicIcon__FaDiscordsvg"; // plasmic-import: QF2BkBu419kQ/icon
import FaMediumsvgIcon from "./icons/PlasmicIcon__FaMediumsvg"; // plasmic-import: xWN5wyX3rPnk/icon
import FaRedditsvgIcon from "./icons/PlasmicIcon__FaRedditsvg"; // plasmic-import: jM2RezfBPEot/icon
import FaDiscoursesvgIcon from "./icons/PlasmicIcon__FaDiscoursesvg"; // plasmic-import: JZX1VZucx_K-/icon
import FaTumblrsvgIcon from "./icons/PlasmicIcon__FaTumblrsvg"; // plasmic-import: fdqHEnZSybbh/icon
import FaSkypesvgIcon from "./icons/PlasmicIcon__FaSkypesvg"; // plasmic-import: u1rrhiAuQJzK/icon
import FaYoutubesvgIcon from "./icons/PlasmicIcon__FaYoutubesvg"; // plasmic-import: F5BkDJbU87cL/icon
import FaVimeoVsvgIcon from "./icons/PlasmicIcon__FaVimeoVsvg"; // plasmic-import: nu8TObiDfD2c/icon
import FaGithubsvgIcon from "./icons/PlasmicIcon__FaGithubsvg"; // plasmic-import: Y5Q9avl_X7KY/icon
import FaGitlabsvgIcon from "./icons/PlasmicIcon__FaGitlabsvg"; // plasmic-import: FQ--toKDR4ES/icon
import FaBehancesvgIcon from "./icons/PlasmicIcon__FaBehancesvg"; // plasmic-import: 7BgwGfedHza3/icon
import FaDribbblesvgIcon from "./icons/PlasmicIcon__FaDribbblesvg"; // plasmic-import: F6b5qbpJ8TMq/icon
import FaFigmasvgIcon from "./icons/PlasmicIcon__FaFigmasvg"; // plasmic-import: Lj8H6IdEnUnS/icon
import FaUnsplashsvgIcon from "./icons/PlasmicIcon__FaUnsplashsvg"; // plasmic-import: 9K34Rj0C59FS/icon
import FaTwitchsvgIcon from "./icons/PlasmicIcon__FaTwitchsvg"; // plasmic-import: 2Z4KHNe05T8H/icon
import FaSteamsvgIcon from "./icons/PlasmicIcon__FaSteamsvg"; // plasmic-import: W4dhzt6VbPPF/icon
import FaSpotifysvgIcon from "./icons/PlasmicIcon__FaSpotifysvg"; // plasmic-import: ciBNZQvY7DtB/icon
import FaLastfmsvgIcon from "./icons/PlasmicIcon__FaLastfmsvg"; // plasmic-import: _we8QEDZefEn/icon
import FaSoundcloudsvgIcon from "./icons/PlasmicIcon__FaSoundcloudsvg"; // plasmic-import: 7oYnAjDqV_IY/icon
import FaShopifysvgIcon from "./icons/PlasmicIcon__FaShopifysvg"; // plasmic-import: GBZ9aJr_k84-/icon
import FaShareSquaresvgIcon from "./icons/PlasmicIcon__FaShareSquaresvg"; // plasmic-import: d6mv-o90U0HM/icon
import FaBookmarkSolidsvgIcon from "./icons/PlasmicIcon__FaBookmarkSolidsvg"; // plasmic-import: vyuIYJa8Q1K0/icon
import FaPhoneSolidsvgIcon from "./icons/PlasmicIcon__FaPhoneSolidsvg"; // plasmic-import: 8eAYQTJ-QSNd/icon
import FaMessageSolidsvgIcon from "./icons/PlasmicIcon__FaMessageSolidsvg"; // plasmic-import: 7LvGdRxkER7C/icon
import FaEmailSolidsvgIcon from "./icons/PlasmicIcon__FaEmailSolidsvg"; // plasmic-import: 8Pf8-rA9O_vT/icon
import FaCalendarSolidsvgIcon from "./icons/PlasmicIcon__FaCalendarSolidsvg"; // plasmic-import: ZMCw3UkLzqkk/icon

createPlasmicElementProxy;

export type PlasmicCard__VariantMembers = {
  size: "sm" | "md" | "lg";
  styles:
    | "removeHeader"
    | "removeTitle"
    | "removeBody"
    | "removeFooterButton"
    | "removeFooterSeparator"
    | "removeFooterIcons"
    | "removeImage"
    | "removeKicker"
    | "removeFooterInformation";
  enableAction: "enableAction";
  orientation:
    | "reorientateBase"
    | "reorientateUpperStack"
    | "reorientateLowerStack";
  reverse: "reverseBase" | "reverseUpperStack" | "reverseLowerStack";
  type: "basic" | "image" | "article" | "user" | "pricing";
  footerIconOptions: "socialIcons" | "shareIcons" | "contactIcons";
  layout: "center";
  backgroundLayer: "unnamedVariant";
};
export type PlasmicCard__VariantsArgs = {
  size?: SingleChoiceArg<"sm" | "md" | "lg">;
  styles?: MultiChoiceArg<
    | "removeHeader"
    | "removeTitle"
    | "removeBody"
    | "removeFooterButton"
    | "removeFooterSeparator"
    | "removeFooterIcons"
    | "removeImage"
    | "removeKicker"
    | "removeFooterInformation"
  >;
  enableAction?: SingleBooleanChoiceArg<"enableAction">;
  orientation?: MultiChoiceArg<
    "reorientateBase" | "reorientateUpperStack" | "reorientateLowerStack"
  >;
  reverse?: MultiChoiceArg<
    "reverseBase" | "reverseUpperStack" | "reverseLowerStack"
  >;
  type?: SingleChoiceArg<"basic" | "image" | "article" | "user" | "pricing">;
  footerIconOptions?: MultiChoiceArg<
    "socialIcons" | "shareIcons" | "contactIcons"
  >;
  layout?: SingleChoiceArg<"center">;
  backgroundLayer?: SingleChoiceArg<"unnamedVariant">;
};
type VariantPropType = keyof PlasmicCard__VariantsArgs;
export const PlasmicCard__VariantProps = new Array<VariantPropType>(
  "size",
  "styles",
  "enableAction",
  "orientation",
  "reverse",
  "type",
  "footerIconOptions",
  "layout",
  "backgroundLayer"
);

export type PlasmicCard__ArgsType = {
  contentSlot?: React.ReactNode;
  headerImageSlot?: React.ReactNode;
  titleSlot?: React.ReactNode;
  buttonFooterSlot?: React.ReactNode;
  headerTitleSlot?: React.ReactNode;
  children?: React.ReactNode;
  socialIconFooterSlot?: React.ReactNode;
  shareIconFooterSlot?: React.ReactNode;
  contactIconFooterSlot?: React.ReactNode;
  listSlot?: React.ReactNode;
  headerIconSlot?: React.ReactNode;
};
type ArgPropType = keyof PlasmicCard__ArgsType;
export const PlasmicCard__ArgProps = new Array<ArgPropType>(
  "contentSlot",
  "headerImageSlot",
  "titleSlot",
  "buttonFooterSlot",
  "headerTitleSlot",
  "children",
  "socialIconFooterSlot",
  "shareIconFooterSlot",
  "contactIconFooterSlot",
  "listSlot",
  "headerIconSlot"
);

export type PlasmicCard__OverridesType = {
  cardBase?: Flex__<"div">;
  upperStack?: Flex__<"div">;
  flairStack?: Flex__<"div">;
  visualStack?: Flex__<"div">;
  imageStack?: Flex__<"div">;
  iconStack?: Flex__<"div">;
  actionStack?: Flex__<"div">;
  headingStack?: Flex__<"div">;
  headerElementStack?: Flex__<"div">;
  headerStack?: Flex__<"div">;
  titleElementStack?: Flex__<"div">;
  titleStack?: Flex__<"div">;
  lowerStack?: Flex__<"div">;
  bodyStack?: Flex__<"div">;
  contentStack?: Flex__<"div">;
  listStack?: Flex__<"div">;
  footerStack?: Flex__<"div">;
  footerButton?: Flex__<"div">;
  footerSeparator?: Flex__<"div">;
  separator?: Flex__<typeof Separator>;
  footerInformation?: Flex__<"div">;
  content?: Flex__<typeof Content>;
  text?: Flex__<"div">;
  footerIconStack?: Flex__<"div">;
  footerSocialIconStack?: Flex__<"div">;
  footerShareIconStack?: Flex__<"div">;
  footerContactIconStack?: Flex__<"div">;
};

export interface DefaultCardProps {
  contentSlot?: React.ReactNode;
  headerImageSlot?: React.ReactNode;
  titleSlot?: React.ReactNode;
  buttonFooterSlot?: React.ReactNode;
  headerTitleSlot?: React.ReactNode;
  children?: React.ReactNode;
  socialIconFooterSlot?: React.ReactNode;
  shareIconFooterSlot?: React.ReactNode;
  contactIconFooterSlot?: React.ReactNode;
  listSlot?: React.ReactNode;
  headerIconSlot?: React.ReactNode;
  size?: SingleChoiceArg<"sm" | "md" | "lg">;
  styles?: MultiChoiceArg<
    | "removeHeader"
    | "removeTitle"
    | "removeBody"
    | "removeFooterButton"
    | "removeFooterSeparator"
    | "removeFooterIcons"
    | "removeImage"
    | "removeKicker"
    | "removeFooterInformation"
  >;
  enableAction?: SingleBooleanChoiceArg<"enableAction">;
  orientation?: MultiChoiceArg<
    "reorientateBase" | "reorientateUpperStack" | "reorientateLowerStack"
  >;
  reverse?: MultiChoiceArg<
    "reverseBase" | "reverseUpperStack" | "reverseLowerStack"
  >;
  type?: SingleChoiceArg<"basic" | "image" | "article" | "user" | "pricing">;
  footerIconOptions?: MultiChoiceArg<
    "socialIcons" | "shareIcons" | "contactIcons"
  >;
  layout?: SingleChoiceArg<"center">;
  backgroundLayer?: SingleChoiceArg<"unnamedVariant">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCard__RenderFunc(props: {
  variants: PlasmicCard__VariantsArgs;
  args: PlasmicCard__ArgsType;
  overrides: PlasmicCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "size",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.size
      },
      {
        path: "styles",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.styles
      },
      {
        path: "enableAction",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.enableAction
      },
      {
        path: "orientation",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.orientation
      },
      {
        path: "reverse",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.reverse
      },
      {
        path: "type",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.type
      },
      {
        path: "footerIconOptions",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.footerIconOptions
      },
      {
        path: "layout",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.layout
      },
      {
        path: "backgroundLayer",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.backgroundLayer
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    mode: useMode(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"cardBase"}
      data-plasmic-override={overrides.cardBase}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_core_css.plasmic_tokens,
        plasmic_semantic_css.plasmic_tokens,
        plasmic_typography_css.plasmic_tokens,
        plasmic_title_css.plasmic_tokens,
        plasmic_kicker_css.plasmic_tokens,
        plasmic_headline_css.plasmic_tokens,
        plasmic_sub_headline_css.plasmic_tokens,
        plasmic_image_css.plasmic_tokens,
        plasmic_content_css.plasmic_tokens,
        plasmic_button_css.plasmic_tokens,
        plasmic_list_group_css.plasmic_tokens,
        plasmic_list_item_css.plasmic_tokens,
        plasmic_icon_css.plasmic_tokens,
        sty.cardBase,
        {
          [plasmic_core_css.global_mode_dark]: hasVariant(
            globalVariants,
            "mode",
            "dark"
          ),
          [sty.cardBasebackgroundLayer_unnamedVariant]: hasVariant(
            $state,
            "backgroundLayer",
            "unnamedVariant"
          ),
          [sty.cardBaseenableAction]: hasVariant(
            $state,
            "enableAction",
            "enableAction"
          ),
          [sty.cardBaselayout_center]: hasVariant($state, "layout", "center"),
          [sty.cardBaseorientation_reorientateBase]: hasVariant(
            $state,
            "orientation",
            "reorientateBase"
          ),
          [sty.cardBasereverse_reverseBase]: hasVariant(
            $state,
            "reverse",
            "reverseBase"
          ),
          [sty.cardBasesize_lg]: hasVariant($state, "size", "lg"),
          [sty.cardBasesize_md]: hasVariant($state, "size", "md"),
          [sty.cardBasesize_sm]: hasVariant($state, "size", "sm"),
          [sty.cardBasestyles_removeBody]: hasVariant(
            $state,
            "styles",
            "removeBody"
          ),
          [sty.cardBasestyles_removeFooterButton]: hasVariant(
            $state,
            "styles",
            "removeFooterButton"
          ),
          [sty.cardBasestyles_removeHeader]: hasVariant(
            $state,
            "styles",
            "removeHeader"
          ),
          [sty.cardBasestyles_removeTitle]: hasVariant(
            $state,
            "styles",
            "removeTitle"
          ),
          [sty.cardBasetype_article]: hasVariant($state, "type", "article"),
          [sty.cardBasetype_pricing]: hasVariant($state, "type", "pricing")
        }
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"upperStack"}
        data-plasmic-override={overrides.upperStack}
        hasGap={true}
        className={classNames(projectcss.all, sty.upperStack, {
          [sty.upperStackorientation_reorientateBase]: hasVariant(
            $state,
            "orientation",
            "reorientateBase"
          ),
          [sty.upperStackorientation_reorientateUpperStack]: hasVariant(
            $state,
            "orientation",
            "reorientateUpperStack"
          ),
          [sty.upperStackreverse_reverseBase]: hasVariant(
            $state,
            "reverse",
            "reverseBase"
          ),
          [sty.upperStackreverse_reverseUpperStack]: hasVariant(
            $state,
            "reverse",
            "reverseUpperStack"
          ),
          [sty.upperStacksize_sm]: hasVariant($state, "size", "sm"),
          [sty.upperStacktype_article]: hasVariant($state, "type", "article"),
          [sty.upperStacktype_basic]: hasVariant($state, "type", "basic"),
          [sty.upperStacktype_pricing]: hasVariant($state, "type", "pricing"),
          [sty.upperStacktype_user]: hasVariant($state, "type", "user")
        })}
      >
        <div
          data-plasmic-name={"flairStack"}
          data-plasmic-override={overrides.flairStack}
          className={classNames(projectcss.all, sty.flairStack, {
            [sty.flairStacktype_basic]: hasVariant($state, "type", "basic"),
            [sty.flairStacktype_pricing]: hasVariant($state, "type", "pricing")
          })}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"visualStack"}
            data-plasmic-override={overrides.visualStack}
            hasGap={true}
            className={classNames(projectcss.all, sty.visualStack, {
              [sty.visualStacktype_pricing]: hasVariant(
                $state,
                "type",
                "pricing"
              )
            })}
          >
            <div
              data-plasmic-name={"imageStack"}
              data-plasmic-override={overrides.imageStack}
              className={classNames(projectcss.all, sty.imageStack, {
                [sty.imageStacktype_article]: hasVariant(
                  $state,
                  "type",
                  "article"
                ),
                [sty.imageStacktype_image]: hasVariant($state, "type", "image"),
                [sty.imageStacktype_pricing]: hasVariant(
                  $state,
                  "type",
                  "pricing"
                )
              })}
            >
              {renderPlasmicSlot({
                defaultContents: (
                  <Image
                    className={classNames("__wab_instance", sty.image__g2D20)}
                    imageSlot={
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__nn4Db)}
                        displayHeight={"100%"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"100%"}
                        loading={"lazy"}
                      />
                    }
                  />
                ),

                value: args.headerImageSlot
              })}
            </div>
            <div
              data-plasmic-name={"iconStack"}
              data-plasmic-override={overrides.iconStack}
              className={classNames(projectcss.all, sty.iconStack, {
                [sty.iconStackbackgroundLayer_unnamedVariant]: hasVariant(
                  $state,
                  "backgroundLayer",
                  "unnamedVariant"
                ),
                [sty.iconStacktype_article]: hasVariant(
                  $state,
                  "type",
                  "article"
                ),
                [sty.iconStacktype_image]: hasVariant($state, "type", "image"),
                [sty.iconStacktype_pricing]: hasVariant(
                  $state,
                  "type",
                  "pricing"
                ),
                [sty.iconStacktype_user]: hasVariant($state, "type", "user")
              })}
            >
              {renderPlasmicSlot({
                defaultContents: (
                  <Icon
                    className={classNames("__wab_instance", sty.icon__hAPtb)}
                  />
                ),

                value: args.headerIconSlot
              })}
            </div>
          </Stack__>
          <div
            data-plasmic-name={"actionStack"}
            data-plasmic-override={overrides.actionStack}
            className={classNames(projectcss.all, sty.actionStack, {
              [sty.actionStackenableAction]: hasVariant(
                $state,
                "enableAction",
                "enableAction"
              ),
              [sty.actionStacklayout_center]: hasVariant(
                $state,
                "layout",
                "center"
              ),
              [sty.actionStacktype_pricing]: hasVariant(
                $state,
                "type",
                "pricing"
              )
            })}
          >
            {renderPlasmicSlot({
              defaultContents: (
                <svg
                  className={classNames(projectcss.all, sty.svg__val3F)}
                  role={"img"}
                />
              ),

              value: args.children
            })}
          </div>
        </div>
        <Stack__
          as={"div"}
          data-plasmic-name={"headingStack"}
          data-plasmic-override={overrides.headingStack}
          hasGap={true}
          className={classNames(projectcss.all, sty.headingStack, {
            [sty.headingStacktype_pricing]: hasVariant(
              $state,
              "type",
              "pricing"
            )
          })}
        >
          <div
            data-plasmic-name={"headerElementStack"}
            data-plasmic-override={overrides.headerElementStack}
            className={classNames(projectcss.all, sty.headerElementStack, {
              [sty.headerElementStacklayout_center]: hasVariant(
                $state,
                "layout",
                "center"
              ),
              [sty.headerElementStackorientation_reorientateBase]: hasVariant(
                $state,
                "orientation",
                "reorientateBase"
              ),
              [sty.headerElementStackorientation_reorientateUpperStack]:
                hasVariant($state, "orientation", "reorientateUpperStack"),
              [sty.headerElementStacksize_sm]: hasVariant($state, "size", "sm"),
              [sty.headerElementStackstyles_removeTitle]: hasVariant(
                $state,
                "styles",
                "removeTitle"
              ),
              [sty.headerElementStacktype_article]: hasVariant(
                $state,
                "type",
                "article"
              ),
              [sty.headerElementStacktype_pricing]: hasVariant(
                $state,
                "type",
                "pricing"
              )
            })}
          >
            <div
              data-plasmic-name={"headerStack"}
              data-plasmic-override={overrides.headerStack}
              className={classNames(projectcss.all, sty.headerStack, {
                [sty.headerStacktype_basic]: hasVariant(
                  $state,
                  "type",
                  "basic"
                ),
                [sty.headerStacktype_image]: hasVariant(
                  $state,
                  "type",
                  "image"
                ),
                [sty.headerStacktype_pricing]: hasVariant(
                  $state,
                  "type",
                  "pricing"
                )
              })}
            >
              {renderPlasmicSlot({
                defaultContents: (
                  <Title
                    className={classNames("__wab_instance", sty.title__gvT4Q)}
                    headlineSlot={
                      <Headline
                        className={classNames(
                          "__wab_instance",
                          sty.headline__xpxUn
                        )}
                        contentSlot={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___7JWw
                            )}
                          >
                            {"Heading"}
                          </div>
                        }
                      />
                    }
                    paddingNone={true}
                    styles={["removeKicker", "removeSubheadline"]}
                    subHeadlineSlot={
                      <SubHeadline
                        className={classNames(
                          "__wab_instance",
                          sty.subHeadline__yXIyR
                        )}
                        contentSlot={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__wzbkn
                            )}
                          >
                            {"Role"}
                          </div>
                        }
                      />
                    }
                  />
                ),

                value: args.headerTitleSlot
              })}
            </div>
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"titleElementStack"}
            data-plasmic-override={overrides.titleElementStack}
            hasGap={true}
            className={classNames(projectcss.all, sty.titleElementStack, {
              [sty.titleElementStacklayout_center]: hasVariant(
                $state,
                "layout",
                "center"
              )
            })}
          >
            <div
              data-plasmic-name={"titleStack"}
              data-plasmic-override={overrides.titleStack}
              className={classNames(projectcss.all, sty.titleStack, {
                [sty.titleStacklayout_center]: hasVariant(
                  $state,
                  "layout",
                  "center"
                ),
                [sty.titleStackorientation_reorientateBase]: hasVariant(
                  $state,
                  "orientation",
                  "reorientateBase"
                ),
                [sty.titleStackorientation_reorientateUpperStack]: hasVariant(
                  $state,
                  "orientation",
                  "reorientateUpperStack"
                ),
                [sty.titleStacksize_sm]: hasVariant($state, "size", "sm"),
                [sty.titleStackstyles_removeBody]: hasVariant(
                  $state,
                  "styles",
                  "removeBody"
                ),
                [sty.titleStackstyles_removeTitle]: hasVariant(
                  $state,
                  "styles",
                  "removeTitle"
                ),
                [sty.titleStacktype_pricing]: hasVariant(
                  $state,
                  "type",
                  "pricing"
                ),
                [sty.titleStacktype_user]: hasVariant($state, "type", "user")
              })}
            >
              {renderPlasmicSlot({
                defaultContents: (
                  <Title
                    className={classNames("__wab_instance", sty.title__tu3Yn)}
                    headlineSlot={
                      <Headline
                        className={classNames(
                          "__wab_instance",
                          sty.headline___43Le6
                        )}
                        contentSlot={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xdNxq
                            )}
                          >
                            {"/mo"}
                          </div>
                        }
                      />
                    }
                    kickerSlot={
                      <Kicker
                        className={classNames(
                          "__wab_instance",
                          sty.kicker___1FdX
                        )}
                        contentSlot={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___3Unw5
                            )}
                          >
                            {"Subheading"}
                          </div>
                        }
                      />
                    }
                    paddingNone={true}
                    styles={["removeHeadline", "removeSubheadline"]}
                  />
                ),

                value: args.titleSlot
              })}
            </div>
          </Stack__>
        </Stack__>
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"lowerStack"}
        data-plasmic-override={overrides.lowerStack}
        hasGap={true}
        className={classNames(projectcss.all, sty.lowerStack, {
          [sty.lowerStacklayout_center]: hasVariant($state, "layout", "center"),
          [sty.lowerStackorientation_reorientateBase]: hasVariant(
            $state,
            "orientation",
            "reorientateBase"
          ),
          [sty.lowerStackorientation_reorientateLowerStack]: hasVariant(
            $state,
            "orientation",
            "reorientateLowerStack"
          ),
          [sty.lowerStackreverse_reverseLowerStack]: hasVariant(
            $state,
            "reverse",
            "reverseLowerStack"
          ),
          [sty.lowerStacktype_pricing]: hasVariant($state, "type", "pricing")
        })}
      >
        <div
          data-plasmic-name={"bodyStack"}
          data-plasmic-override={overrides.bodyStack}
          className={classNames(projectcss.all, sty.bodyStack, {
            [sty.bodyStacklayout_center]: hasVariant(
              $state,
              "layout",
              "center"
            ),
            [sty.bodyStackorientation_reorientateLowerStack]: hasVariant(
              $state,
              "orientation",
              "reorientateLowerStack"
            ),
            [sty.bodyStackstyles_removeBody]: hasVariant(
              $state,
              "styles",
              "removeBody"
            )
          })}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"contentStack"}
            data-plasmic-override={overrides.contentStack}
            hasGap={true}
            className={classNames(projectcss.all, sty.contentStack, {
              [sty.contentStacktype_pricing]: hasVariant(
                $state,
                "type",
                "pricing"
              )
            })}
          >
            {renderPlasmicSlot({
              defaultContents: (
                <Content
                  className={classNames("__wab_instance", sty.content__rY2Rj)}
                  contentSlot={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__e4Aa
                      )}
                    >
                      {
                        "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore."
                      }
                    </div>
                  }
                />
              ),

              value: args.contentSlot
            })}
          </Stack__>
          {(hasVariant($state, "type", "pricing") ? true : false) ? (
            <Stack__
              as={"div"}
              data-plasmic-name={"listStack"}
              data-plasmic-override={overrides.listStack}
              hasGap={true}
              className={classNames(projectcss.all, sty.listStack, {
                [sty.listStacktype_pricing]: hasVariant(
                  $state,
                  "type",
                  "pricing"
                )
              })}
            >
              {renderPlasmicSlot({
                defaultContents: (
                  <ListGroup
                    className={classNames(
                      "__wab_instance",
                      sty.listGroup___0L3Q8
                    )}
                    listItemSlot1={
                      <ListItem
                        className={classNames(
                          "__wab_instance",
                          sty.listItem___3SY2
                        )}
                        listContentSlot={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__pjRxX
                            )}
                          >
                            {"This dew like life fades away"}
                          </div>
                        }
                      >
                        <FaBarssvgIcon
                          className={classNames(projectcss.all, sty.svg__bBder)}
                          role={"img"}
                        />
                      </ListItem>
                    }
                    listItemSlot10={
                      <ListItem
                        className={classNames(
                          "__wab_instance",
                          sty.listItem__u7Cs8
                        )}
                      >
                        <FaBarssvgIcon
                          className={classNames(projectcss.all, sty.svg__fdCk)}
                          role={"img"}
                        />
                      </ListItem>
                    }
                    listItemSlot11={
                      <ListItem
                        className={classNames(
                          "__wab_instance",
                          sty.listItem__h75L
                        )}
                      >
                        <FaBarssvgIcon
                          className={classNames(projectcss.all, sty.svg__elx5O)}
                          role={"img"}
                        />
                      </ListItem>
                    }
                    listItemSlot12={
                      <ListItem
                        className={classNames(
                          "__wab_instance",
                          sty.listItem__ygdJ3
                        )}
                      >
                        <FaBarssvgIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___5KMgK
                          )}
                          role={"img"}
                        />
                      </ListItem>
                    }
                    listItemSlot2={
                      <ListItem
                        className={classNames(
                          "__wab_instance",
                          sty.listItem__lkpZx
                        )}
                        listContentSlot={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nA1LV
                            )}
                          >
                            {"Time speeds swiftly"}
                          </div>
                        }
                      >
                        <FaBarssvgIcon
                          className={classNames(projectcss.all, sty.svg__sR2K)}
                          role={"img"}
                        />
                      </ListItem>
                    }
                    listItemSlot3={
                      <ListItem
                        className={classNames(
                          "__wab_instance",
                          sty.listItem__m4WiR
                        )}
                        listContentSlot={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___1CHps
                            )}
                          >
                            {"In this short life of ours"}
                          </div>
                        }
                      >
                        <FaBarssvgIcon
                          className={classNames(projectcss.all, sty.svg__xRgw4)}
                          role={"img"}
                        />
                      </ListItem>
                    }
                    listItemSlot4={
                      <ListItem
                        className={classNames(
                          "__wab_instance",
                          sty.listItem__jzVt0
                        )}
                        listContentSlot={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__d4AOq
                            )}
                          >
                            {"Avoid involvement in superfluous things"}
                          </div>
                        }
                      >
                        <FaBarssvgIcon
                          className={classNames(projectcss.all, sty.svg__t4NpL)}
                          role={"img"}
                        />
                      </ListItem>
                    }
                    listItemSlot5={
                      <ListItem
                        className={classNames(
                          "__wab_instance",
                          sty.listItem__rvgZf
                        )}
                        listContentSlot={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__jlUeq
                            )}
                          >
                            {"Product Feature"}
                          </div>
                        }
                      >
                        <FaBarssvgIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___3RRni
                          )}
                          role={"img"}
                        />
                      </ListItem>
                    }
                    listItemSlot6={
                      <ListItem
                        className={classNames(
                          "__wab_instance",
                          sty.listItem__ajk6V
                        )}
                        listContentSlot={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__v0V9X
                            )}
                          >
                            {"And just study the Way"}
                          </div>
                        }
                      >
                        <FaBarssvgIcon
                          className={classNames(projectcss.all, sty.svg__fxsRs)}
                          role={"img"}
                        />
                      </ListItem>
                    }
                    listItemSlot7={
                      <ListItem
                        className={classNames(
                          "__wab_instance",
                          sty.listItem__iZaYj
                        )}
                      >
                        <FaBarssvgIcon
                          className={classNames(projectcss.all, sty.svg__rga3G)}
                          role={"img"}
                        />
                      </ListItem>
                    }
                    listItemSlot8={
                      <ListItem
                        className={classNames(
                          "__wab_instance",
                          sty.listItem__jmxkj
                        )}
                      >
                        <FaBarssvgIcon
                          className={classNames(projectcss.all, sty.svg__bU3K)}
                          role={"img"}
                        />
                      </ListItem>
                    }
                    listItemSlot9={
                      <ListItem
                        className={classNames(
                          "__wab_instance",
                          sty.listItem__vrnr
                        )}
                      >
                        <FaBarssvgIcon
                          className={classNames(projectcss.all, sty.svg__sk8NV)}
                          role={"img"}
                        />
                      </ListItem>
                    }
                  />
                ),

                value: args.listSlot
              })}
            </Stack__>
          ) : null}
        </div>
        <Stack__
          as={"div"}
          data-plasmic-name={"footerStack"}
          data-plasmic-override={overrides.footerStack}
          hasGap={true}
          className={classNames(projectcss.all, sty.footerStack, {
            [sty.footerStacklayout_center]: hasVariant(
              $state,
              "layout",
              "center"
            ),
            [sty.footerStackorientation_reorientateLowerStack]: hasVariant(
              $state,
              "orientation",
              "reorientateLowerStack"
            ),
            [sty.footerStackstyles_removeBody]: hasVariant(
              $state,
              "styles",
              "removeBody"
            ),
            [sty.footerStackstyles_removeFooterButton]: hasVariant(
              $state,
              "styles",
              "removeFooterButton"
            ),
            [sty.footerStacktype_article]: hasVariant(
              $state,
              "type",
              "article"
            ),
            [sty.footerStacktype_pricing]: hasVariant(
              $state,
              "type",
              "pricing"
            ),
            [sty.footerStacktype_user]: hasVariant($state, "type", "user")
          })}
        >
          <div
            data-plasmic-name={"footerButton"}
            data-plasmic-override={overrides.footerButton}
            className={classNames(projectcss.all, sty.footerButton, {
              [sty.footerButtonlayout_center]: hasVariant(
                $state,
                "layout",
                "center"
              ),
              [sty.footerButtonstyles_removeFooterButton]: hasVariant(
                $state,
                "styles",
                "removeFooterButton"
              ),
              [sty.footerButtontype_article]: hasVariant(
                $state,
                "type",
                "article"
              ),
              [sty.footerButtontype_pricing]: hasVariant(
                $state,
                "type",
                "pricing"
              ),
              [sty.footerButtontype_user]: hasVariant($state, "type", "user")
            })}
          >
            {(
              hasVariant($state, "footerIconOptions", "contactIcons")
                ? false
                : hasVariant($state, "footerIconOptions", "shareIcons")
                ? false
                : true
            )
              ? renderPlasmicSlot({
                  defaultContents: (
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__aCcR8
                      )}
                      endIcon={
                        <FaArrowRightsvgIcon
                          className={classNames(projectcss.all, sty.svg__sRpUa)}
                          role={"img"}
                        />
                      }
                      startIcon={
                        <FaChecksvgIcon
                          className={classNames(projectcss.all, sty.svg__z0XnC)}
                          role={"img"}
                        />
                      }
                    />
                  ),

                  value: args.buttonFooterSlot
                })
              : null}
          </div>
          <div
            data-plasmic-name={"footerSeparator"}
            data-plasmic-override={overrides.footerSeparator}
            className={classNames(projectcss.all, sty.footerSeparator, {
              [sty.footerSeparatortype_article]: hasVariant(
                $state,
                "type",
                "article"
              ),
              [sty.footerSeparatortype_basic]: hasVariant(
                $state,
                "type",
                "basic"
              ),
              [sty.footerSeparatortype_image]: hasVariant(
                $state,
                "type",
                "image"
              ),
              [sty.footerSeparatortype_pricing]: hasVariant(
                $state,
                "type",
                "pricing"
              ),
              [sty.footerSeparatortype_user]: hasVariant($state, "type", "user")
            })}
          >
            <Separator
              data-plasmic-name={"separator"}
              data-plasmic-override={overrides.separator}
              className={classNames("__wab_instance", sty.separator)}
            />
          </div>
          <div
            data-plasmic-name={"footerInformation"}
            data-plasmic-override={overrides.footerInformation}
            className={classNames(projectcss.all, sty.footerInformation, {
              [sty.footerInformationstyles_removeFooterInformation]: hasVariant(
                $state,
                "styles",
                "removeFooterInformation"
              ),
              [sty.footerInformationtype_article]: hasVariant(
                $state,
                "type",
                "article"
              ),
              [sty.footerInformationtype_basic]: hasVariant(
                $state,
                "type",
                "basic"
              ),
              [sty.footerInformationtype_image]: hasVariant(
                $state,
                "type",
                "image"
              ),
              [sty.footerInformationtype_user]: hasVariant(
                $state,
                "type",
                "user"
              )
            })}
          >
            <Content
              data-plasmic-name={"content"}
              data-plasmic-override={overrides.content}
              className={classNames("__wab_instance", sty.content)}
              contentSlot={
                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text,
                    {
                      [sty.texttype_basic]: hasVariant($state, "type", "basic"),
                      [sty.texttype_image]: hasVariant($state, "type", "image"),
                      [sty.texttype_pricing]: hasVariant(
                        $state,
                        "type",
                        "pricing"
                      )
                    }
                  )}
                >
                  {hasVariant($state, "type", "pricing")
                    ? "No credit card required."
                    : "Jul 24 2:18PM"}
                </div>
              }
            />
          </div>
          <div
            data-plasmic-name={"footerIconStack"}
            data-plasmic-override={overrides.footerIconStack}
            className={classNames(projectcss.all, sty.footerIconStack, {
              [sty.footerIconStackfooterIconOptions_shareIcons]: hasVariant(
                $state,
                "footerIconOptions",
                "shareIcons"
              ),
              [sty.footerIconStacklayout_center]: hasVariant(
                $state,
                "layout",
                "center"
              ),
              [sty.footerIconStackstyles_removeFooterButton]: hasVariant(
                $state,
                "styles",
                "removeFooterButton"
              ),
              [sty.footerIconStacktype_basic]: hasVariant(
                $state,
                "type",
                "basic"
              ),
              [sty.footerIconStacktype_image]: hasVariant(
                $state,
                "type",
                "image"
              ),
              [sty.footerIconStacktype_pricing]: hasVariant(
                $state,
                "type",
                "pricing"
              ),
              [sty.footerIconStacktype_user]: hasVariant($state, "type", "user")
            })}
          >
            <div
              data-plasmic-name={"footerSocialIconStack"}
              data-plasmic-override={overrides.footerSocialIconStack}
              className={classNames(projectcss.all, sty.footerSocialIconStack, {
                [sty.footerSocialIconStackfooterIconOptions_contactIcons]:
                  hasVariant($state, "footerIconOptions", "contactIcons"),
                [sty.footerSocialIconStackfooterIconOptions_shareIcons]:
                  hasVariant($state, "footerIconOptions", "shareIcons"),
                [sty.footerSocialIconStackfooterIconOptions_socialIcons]:
                  hasVariant($state, "footerIconOptions", "socialIcons"),
                [sty.footerSocialIconStacktype_article]: hasVariant(
                  $state,
                  "type",
                  "article"
                ),
                [sty.footerSocialIconStacktype_user]: hasVariant(
                  $state,
                  "type",
                  "user"
                )
              })}
            >
              {renderPlasmicSlot({
                defaultContents: (
                  <SocialIcons
                    className={classNames(
                      "__wab_instance",
                      sty.socialIcons__x4DfA
                    )}
                    contrastIcons={[
                      "x",
                      "instagram",
                      "linkedIn",
                      "facebook",
                      "youTube"
                    ]}
                    set={"business"}
                    size={"lg"}
                  />
                ),

                value: args.socialIconFooterSlot
              })}
            </div>
            <div
              data-plasmic-name={"footerShareIconStack"}
              data-plasmic-override={overrides.footerShareIconStack}
              className={classNames(projectcss.all, sty.footerShareIconStack, {
                [sty.footerShareIconStackfooterIconOptions_contactIcons]:
                  hasVariant($state, "footerIconOptions", "contactIcons"),
                [sty.footerShareIconStackfooterIconOptions_socialIcons]:
                  hasVariant($state, "footerIconOptions", "socialIcons"),
                [sty.footerShareIconStacktype_user]: hasVariant(
                  $state,
                  "type",
                  "user"
                )
              })}
            >
              {renderPlasmicSlot({
                defaultContents: (
                  <ShareIcons
                    className={classNames(
                      "__wab_instance",
                      sty.shareIcons__a9WPz
                    )}
                  />
                ),

                value: args.shareIconFooterSlot
              })}
            </div>
            <div
              data-plasmic-name={"footerContactIconStack"}
              data-plasmic-override={overrides.footerContactIconStack}
              className={classNames(
                projectcss.all,
                sty.footerContactIconStack,
                {
                  [sty.footerContactIconStackfooterIconOptions_shareIcons]:
                    hasVariant($state, "footerIconOptions", "shareIcons"),
                  [sty.footerContactIconStackfooterIconOptions_socialIcons]:
                    hasVariant($state, "footerIconOptions", "socialIcons"),
                  [sty.footerContactIconStacktype_article]: hasVariant(
                    $state,
                    "type",
                    "article"
                  ),
                  [sty.footerContactIconStacktype_user]: hasVariant(
                    $state,
                    "type",
                    "user"
                  )
                }
              )}
            >
              {renderPlasmicSlot({
                defaultContents: (
                  <ContactIcons
                    className={classNames(
                      "__wab_instance",
                      sty.contactIcons__aVxaa
                    )}
                  />
                ),

                value: args.contactIconFooterSlot
              })}
            </div>
          </div>
        </Stack__>
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  cardBase: [
    "cardBase",
    "upperStack",
    "flairStack",
    "visualStack",
    "imageStack",
    "iconStack",
    "actionStack",
    "headingStack",
    "headerElementStack",
    "headerStack",
    "titleElementStack",
    "titleStack",
    "lowerStack",
    "bodyStack",
    "contentStack",
    "listStack",
    "footerStack",
    "footerButton",
    "footerSeparator",
    "separator",
    "footerInformation",
    "content",
    "text",
    "footerIconStack",
    "footerSocialIconStack",
    "footerShareIconStack",
    "footerContactIconStack"
  ],
  upperStack: [
    "upperStack",
    "flairStack",
    "visualStack",
    "imageStack",
    "iconStack",
    "actionStack",
    "headingStack",
    "headerElementStack",
    "headerStack",
    "titleElementStack",
    "titleStack"
  ],
  flairStack: [
    "flairStack",
    "visualStack",
    "imageStack",
    "iconStack",
    "actionStack"
  ],
  visualStack: ["visualStack", "imageStack", "iconStack"],
  imageStack: ["imageStack"],
  iconStack: ["iconStack"],
  actionStack: ["actionStack"],
  headingStack: [
    "headingStack",
    "headerElementStack",
    "headerStack",
    "titleElementStack",
    "titleStack"
  ],
  headerElementStack: ["headerElementStack", "headerStack"],
  headerStack: ["headerStack"],
  titleElementStack: ["titleElementStack", "titleStack"],
  titleStack: ["titleStack"],
  lowerStack: [
    "lowerStack",
    "bodyStack",
    "contentStack",
    "listStack",
    "footerStack",
    "footerButton",
    "footerSeparator",
    "separator",
    "footerInformation",
    "content",
    "text",
    "footerIconStack",
    "footerSocialIconStack",
    "footerShareIconStack",
    "footerContactIconStack"
  ],
  bodyStack: ["bodyStack", "contentStack", "listStack"],
  contentStack: ["contentStack"],
  listStack: ["listStack"],
  footerStack: [
    "footerStack",
    "footerButton",
    "footerSeparator",
    "separator",
    "footerInformation",
    "content",
    "text",
    "footerIconStack",
    "footerSocialIconStack",
    "footerShareIconStack",
    "footerContactIconStack"
  ],
  footerButton: ["footerButton"],
  footerSeparator: ["footerSeparator", "separator"],
  separator: ["separator"],
  footerInformation: ["footerInformation", "content", "text"],
  content: ["content", "text"],
  text: ["text"],
  footerIconStack: [
    "footerIconStack",
    "footerSocialIconStack",
    "footerShareIconStack",
    "footerContactIconStack"
  ],
  footerSocialIconStack: ["footerSocialIconStack"],
  footerShareIconStack: ["footerShareIconStack"],
  footerContactIconStack: ["footerContactIconStack"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  cardBase: "div";
  upperStack: "div";
  flairStack: "div";
  visualStack: "div";
  imageStack: "div";
  iconStack: "div";
  actionStack: "div";
  headingStack: "div";
  headerElementStack: "div";
  headerStack: "div";
  titleElementStack: "div";
  titleStack: "div";
  lowerStack: "div";
  bodyStack: "div";
  contentStack: "div";
  listStack: "div";
  footerStack: "div";
  footerButton: "div";
  footerSeparator: "div";
  separator: typeof Separator;
  footerInformation: "div";
  content: typeof Content;
  text: "div";
  footerIconStack: "div";
  footerSocialIconStack: "div";
  footerShareIconStack: "div";
  footerContactIconStack: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCard__VariantsArgs;
    args?: PlasmicCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCard__ArgProps,
          internalVariantPropNames: PlasmicCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "cardBase") {
    func.displayName = "PlasmicCard";
  } else {
    func.displayName = `PlasmicCard.${nodeName}`;
  }
  return func;
}

export const PlasmicCard = Object.assign(
  // Top-level PlasmicCard renders the root element
  makeNodeComponent("cardBase"),
  {
    // Helper components rendering sub-elements
    upperStack: makeNodeComponent("upperStack"),
    flairStack: makeNodeComponent("flairStack"),
    visualStack: makeNodeComponent("visualStack"),
    imageStack: makeNodeComponent("imageStack"),
    iconStack: makeNodeComponent("iconStack"),
    actionStack: makeNodeComponent("actionStack"),
    headingStack: makeNodeComponent("headingStack"),
    headerElementStack: makeNodeComponent("headerElementStack"),
    headerStack: makeNodeComponent("headerStack"),
    titleElementStack: makeNodeComponent("titleElementStack"),
    titleStack: makeNodeComponent("titleStack"),
    lowerStack: makeNodeComponent("lowerStack"),
    bodyStack: makeNodeComponent("bodyStack"),
    contentStack: makeNodeComponent("contentStack"),
    listStack: makeNodeComponent("listStack"),
    footerStack: makeNodeComponent("footerStack"),
    footerButton: makeNodeComponent("footerButton"),
    footerSeparator: makeNodeComponent("footerSeparator"),
    separator: makeNodeComponent("separator"),
    footerInformation: makeNodeComponent("footerInformation"),
    content: makeNodeComponent("content"),
    text: makeNodeComponent("text"),
    footerIconStack: makeNodeComponent("footerIconStack"),
    footerSocialIconStack: makeNodeComponent("footerSocialIconStack"),
    footerShareIconStack: makeNodeComponent("footerShareIconStack"),
    footerContactIconStack: makeNodeComponent("footerContactIconStack"),

    // Metadata about props expected for PlasmicCard
    internalVariantProps: PlasmicCard__VariantProps,
    internalArgProps: PlasmicCard__ArgProps
  }
);

export default PlasmicCard;
/* prettier-ignore-end */
