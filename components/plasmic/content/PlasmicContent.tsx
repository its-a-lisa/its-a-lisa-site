// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: xpyP1X2yhd8ZY24SVBFr1E
// Component: -OzGQ9WYy-qh

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ModeValue, useMode } from "../core/PlasmicGlobalVariant__Mode"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../core/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_core_css from "../core/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_semantic_css from "../semantic/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import plasmic_typography_css from "../typography/plasmic.module.css"; // plasmic-import: rs6Egi3bpxgrd3P2FjjZpt/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: xpyP1X2yhd8ZY24SVBFr1E/projectcss
import sty from "./PlasmicContent.module.css"; // plasmic-import: -OzGQ9WYy-qh/css

createPlasmicElementProxy;

export type PlasmicContent__VariantMembers = {
  colors:
    | "secondary"
    | "standard"
    | "main"
    | "ancillary"
    | "success"
    | "information"
    | "error"
    | "disabled"
    | "helper"
    | "onColor";
  family: "_default" | "secondary";
  lineHeight: "_default" | "compact";
  size: "sm" | "md" | "lg";
  weight: "normal" | "light" | "medium";
  align: "left" | "center" | "right" | "justified";
  noPadding: "noPadding";
};
export type PlasmicContent__VariantsArgs = {
  colors?: SingleChoiceArg<
    | "secondary"
    | "standard"
    | "main"
    | "ancillary"
    | "success"
    | "information"
    | "error"
    | "disabled"
    | "helper"
    | "onColor"
  >;
  family?: SingleChoiceArg<"_default" | "secondary">;
  lineHeight?: SingleChoiceArg<"_default" | "compact">;
  size?: SingleChoiceArg<"sm" | "md" | "lg">;
  weight?: SingleChoiceArg<"normal" | "light" | "medium">;
  align?: SingleChoiceArg<"left" | "center" | "right" | "justified">;
  noPadding?: SingleBooleanChoiceArg<"noPadding">;
};
type VariantPropType = keyof PlasmicContent__VariantsArgs;
export const PlasmicContent__VariantProps = new Array<VariantPropType>(
  "colors",
  "family",
  "lineHeight",
  "size",
  "weight",
  "align",
  "noPadding"
);

export type PlasmicContent__ArgsType = {
  contentSlot?: React.ReactNode;
};
type ArgPropType = keyof PlasmicContent__ArgsType;
export const PlasmicContent__ArgProps = new Array<ArgPropType>("contentSlot");

export type PlasmicContent__OverridesType = {
  contentBase?: Flex__<"div">;
  contentStack?: Flex__<"div">;
};

export interface DefaultContentProps {
  contentSlot?: React.ReactNode;
  colors?: SingleChoiceArg<
    | "secondary"
    | "standard"
    | "main"
    | "ancillary"
    | "success"
    | "information"
    | "error"
    | "disabled"
    | "helper"
    | "onColor"
  >;
  family?: SingleChoiceArg<"_default" | "secondary">;
  lineHeight?: SingleChoiceArg<"_default" | "compact">;
  size?: SingleChoiceArg<"sm" | "md" | "lg">;
  weight?: SingleChoiceArg<"normal" | "light" | "medium">;
  align?: SingleChoiceArg<"left" | "center" | "right" | "justified">;
  noPadding?: SingleBooleanChoiceArg<"noPadding">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicContent__RenderFunc(props: {
  variants: PlasmicContent__VariantsArgs;
  args: PlasmicContent__ArgsType;
  overrides: PlasmicContent__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "colors",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.colors
      },
      {
        path: "family",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.family
      },
      {
        path: "lineHeight",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.lineHeight
      },
      {
        path: "size",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.size
      },
      {
        path: "weight",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.weight
      },
      {
        path: "align",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.align
      },
      {
        path: "noPadding",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noPadding
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    mode: useMode(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  return (
    <div
      data-plasmic-name={"contentBase"}
      data-plasmic-override={overrides.contentBase}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_core_css.plasmic_tokens,
        plasmic_semantic_css.plasmic_tokens,
        plasmic_typography_css.plasmic_tokens,
        sty.contentBase,
        {
          [plasmic_core_css.global_mode_dark]: hasVariant(
            globalVariants,
            "mode",
            "dark"
          ),
          [sty.contentBasenoPadding]: hasVariant(
            $state,
            "noPadding",
            "noPadding"
          ),
          [sty.contentBasesize_lg]: hasVariant($state, "size", "lg"),
          [sty.contentBasesize_sm]: hasVariant($state, "size", "sm")
        }
      )}
    >
      <div
        data-plasmic-name={"contentStack"}
        data-plasmic-override={overrides.contentStack}
        className={classNames(projectcss.all, sty.contentStack, {
          [sty.contentStacknoPadding]: hasVariant(
            $state,
            "noPadding",
            "noPadding"
          ),
          [sty.contentStacksize_lg]: hasVariant($state, "size", "lg"),
          [sty.contentStacksize_sm]: hasVariant($state, "size", "sm")
        })}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__dGa2B
              )}
            >
              {
                "This dew like life fades away; time speeds swiftly. In this short life of ours, avoid involvement in superfluous things and just study the Way. Zen is not some kind of excitement, but concentration on our usual everyday routine.\nThe practice of Zen is forgetting the self in the act of uniting with something. The practice of Zen is forgetting the self in the act of uniting with something."
              }
            </div>
          ),
          value: args.contentSlot,
          className: classNames(sty.slotTargetContentSlot, {
            [sty.slotTargetContentSlotalign_center]: hasVariant(
              $state,
              "align",
              "center"
            ),
            [sty.slotTargetContentSlotalign_justified]: hasVariant(
              $state,
              "align",
              "justified"
            ),
            [sty.slotTargetContentSlotalign_left]: hasVariant(
              $state,
              "align",
              "left"
            ),
            [sty.slotTargetContentSlotalign_right]: hasVariant(
              $state,
              "align",
              "right"
            ),
            [sty.slotTargetContentSlotcolors_ancillary]: hasVariant(
              $state,
              "colors",
              "ancillary"
            ),
            [sty.slotTargetContentSlotcolors_disabled]: hasVariant(
              $state,
              "colors",
              "disabled"
            ),
            [sty.slotTargetContentSlotcolors_error]: hasVariant(
              $state,
              "colors",
              "error"
            ),
            [sty.slotTargetContentSlotcolors_helper]: hasVariant(
              $state,
              "colors",
              "helper"
            ),
            [sty.slotTargetContentSlotcolors_information]: hasVariant(
              $state,
              "colors",
              "information"
            ),
            [sty.slotTargetContentSlotcolors_main]: hasVariant(
              $state,
              "colors",
              "main"
            ),
            [sty.slotTargetContentSlotcolors_onColor]: hasVariant(
              $state,
              "colors",
              "onColor"
            ),
            [sty.slotTargetContentSlotcolors_secondary]: hasVariant(
              $state,
              "colors",
              "secondary"
            ),
            [sty.slotTargetContentSlotcolors_standard]: hasVariant(
              $state,
              "colors",
              "standard"
            ),
            [sty.slotTargetContentSlotcolors_success]: hasVariant(
              $state,
              "colors",
              "success"
            ),
            [sty.slotTargetContentSlotfamily_secondary]: hasVariant(
              $state,
              "family",
              "secondary"
            ),
            [sty.slotTargetContentSlotlineHeight__default]: hasVariant(
              $state,
              "lineHeight",
              "_default"
            ),
            [sty.slotTargetContentSlotlineHeight_compact]: hasVariant(
              $state,
              "lineHeight",
              "compact"
            ),
            [sty.slotTargetContentSlotsize_lg]: hasVariant(
              $state,
              "size",
              "lg"
            ),
            [sty.slotTargetContentSlotsize_sm]: hasVariant(
              $state,
              "size",
              "sm"
            ),
            [sty.slotTargetContentSlotweight_light]: hasVariant(
              $state,
              "weight",
              "light"
            ),
            [sty.slotTargetContentSlotweight_medium]: hasVariant(
              $state,
              "weight",
              "medium"
            )
          })
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  contentBase: ["contentBase", "contentStack"],
  contentStack: ["contentStack"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  contentBase: "div";
  contentStack: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicContent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicContent__VariantsArgs;
    args?: PlasmicContent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicContent__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicContent__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicContent__ArgProps,
          internalVariantPropNames: PlasmicContent__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicContent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "contentBase") {
    func.displayName = "PlasmicContent";
  } else {
    func.displayName = `PlasmicContent.${nodeName}`;
  }
  return func;
}

export const PlasmicContent = Object.assign(
  // Top-level PlasmicContent renders the root element
  makeNodeComponent("contentBase"),
  {
    // Helper components rendering sub-elements
    contentStack: makeNodeComponent("contentStack"),

    // Metadata about props expected for PlasmicContent
    internalVariantProps: PlasmicContent__VariantProps,
    internalArgProps: PlasmicContent__ArgProps
  }
);

export default PlasmicContent;
/* prettier-ignore-end */
