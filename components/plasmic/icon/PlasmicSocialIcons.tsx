// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: nVTL6BvP7Knk1RSNkBbJCm
// Component: O67FO_t5_vVb

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ModeValue, useMode } from "../core/PlasmicGlobalVariant__Mode"; // plasmic-import: yBTVTgAz2Co9/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_core_css from "../core/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_semantic_css from "../semantic/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: nVTL6BvP7Knk1RSNkBbJCm/projectcss
import sty from "./PlasmicSocialIcons.module.css"; // plasmic-import: O67FO_t5_vVb/css

import FaEnvelopeRegularsvgIcon from "./icons/PlasmicIcon__FaEnvelopeRegularsvg"; // plasmic-import: BISsPUkj-QGg/icon
import FaXTwittersvgIcon from "./icons/PlasmicIcon__FaXTwittersvg"; // plasmic-import: y559_YiMddub/icon
import FaMastodonsvgIcon from "./icons/PlasmicIcon__FaMastodonsvg"; // plasmic-import: 74p5mAQMMRX6/icon
import FaTiktoksvgIcon from "./icons/PlasmicIcon__FaTiktoksvg"; // plasmic-import: gnsgH_2Ygb-a/icon
import FaSnapchatsvgIcon from "./icons/PlasmicIcon__FaSnapchatsvg"; // plasmic-import: jpC42bO6Q4oj/icon
import FaThreadssvgIcon from "./icons/PlasmicIcon__FaThreadssvg"; // plasmic-import: 4WJSyXnbR1uS/icon
import FaInstagramsvgIcon from "./icons/PlasmicIcon__FaInstagramsvg"; // plasmic-import: 5jmXEXVxR0re/icon
import FaLinkedinInsvgIcon from "./icons/PlasmicIcon__FaLinkedinInsvg"; // plasmic-import: S07HTC57nGiL/icon
import FaFacebookFsvgIcon from "./icons/PlasmicIcon__FaFacebookFsvg"; // plasmic-import: 8dJ493ywEGwP/icon
import FaSquarePinterestsvgIcon from "./icons/PlasmicIcon__FaSquarePinterestsvg"; // plasmic-import: oKKzerd52mNm/icon
import FaWhatsappsvgIcon from "./icons/PlasmicIcon__FaWhatsappsvg"; // plasmic-import: QPU8MF3tZNlf/icon
import FaTelegramsvgIcon from "./icons/PlasmicIcon__FaTelegramsvg"; // plasmic-import: BMqHhv8aQOGD/icon
import FaDiscordsvgIcon from "./icons/PlasmicIcon__FaDiscordsvg"; // plasmic-import: aApLB5E1jrzS/icon
import FaMediumsvgIcon from "./icons/PlasmicIcon__FaMediumsvg"; // plasmic-import: sllBvjFR8xQj/icon
import FaRedditsvgIcon from "./icons/PlasmicIcon__FaRedditsvg"; // plasmic-import: NXa0_MPdLxMO/icon
import FaDiscoursesvgIcon from "./icons/PlasmicIcon__FaDiscoursesvg"; // plasmic-import: p713iwp-CH3M/icon
import FaTumblrsvgIcon from "./icons/PlasmicIcon__FaTumblrsvg"; // plasmic-import: OiFS_Ut2HtdJ/icon
import FaSkypesvgIcon from "./icons/PlasmicIcon__FaSkypesvg"; // plasmic-import: XoN8so_R9t5Y/icon
import FaYoutubesvgIcon from "./icons/PlasmicIcon__FaYoutubesvg"; // plasmic-import: y17V5oLyhBHt/icon
import FaVimeoVsvgIcon from "./icons/PlasmicIcon__FaVimeoVsvg"; // plasmic-import: V2r5Ueabk2xA/icon
import FaGithubsvgIcon from "./icons/PlasmicIcon__FaGithubsvg"; // plasmic-import: Yb7l79kpHjQu/icon
import FaGitlabsvgIcon from "./icons/PlasmicIcon__FaGitlabsvg"; // plasmic-import: -HfTABTqoCbg/icon
import FaBehancesvgIcon from "./icons/PlasmicIcon__FaBehancesvg"; // plasmic-import: eXJwJHgILMJX/icon
import FaDribbblesvgIcon from "./icons/PlasmicIcon__FaDribbblesvg"; // plasmic-import: 1FGdxb4FO9_B/icon
import FaFigmasvgIcon from "./icons/PlasmicIcon__FaFigmasvg"; // plasmic-import: n_sUcb-5Kdrn/icon
import FaUnsplashsvgIcon from "./icons/PlasmicIcon__FaUnsplashsvg"; // plasmic-import: avS9Y_yHrBgX/icon
import FaTwitchsvgIcon from "./icons/PlasmicIcon__FaTwitchsvg"; // plasmic-import: Q291Ie4qWKhN/icon
import FaSteamsvgIcon from "./icons/PlasmicIcon__FaSteamsvg"; // plasmic-import: MCzr2o4PG-mv/icon
import FaSpotifysvgIcon from "./icons/PlasmicIcon__FaSpotifysvg"; // plasmic-import: 2BqWjF1K0DbM/icon
import FaLastfmsvgIcon from "./icons/PlasmicIcon__FaLastfmsvg"; // plasmic-import: iMNI44XiTmfG/icon
import FaSoundcloudsvgIcon from "./icons/PlasmicIcon__FaSoundcloudsvg"; // plasmic-import: UOHLLDIE35re/icon
import FaShopifysvgIcon from "./icons/PlasmicIcon__FaShopifysvg"; // plasmic-import: cpXeSQoUwPtM/icon

createPlasmicElementProxy;

export type PlasmicSocialIcons__VariantMembers = {
  removeIcon:
    | "email"
    | "xTwitter"
    | "mastadon"
    | "tikTok"
    | "snapchat"
    | "threads"
    | "instagram"
    | "linkedIn"
    | "facebook"
    | "pinterest"
    | "whatsApp"
    | "telegram"
    | "discord"
    | "medium"
    | "reddit"
    | "discourse"
    | "tumblr"
    | "skype"
    | "youTube"
    | "vimeo"
    | "gitHub"
    | "gitLab"
    | "behance"
    | "dribble"
    | "figma"
    | "upsplash"
    | "twitch"
    | "steam"
    | "spotify"
    | "lastFm"
    | "soundcloud"
    | "shopify";
  set: "business" | "developer" | "designer";
  size: "sm" | "md" | "lg";
  contrastIcons:
    | "mail"
    | "x"
    | "mastadon"
    | "tikTok"
    | "snapchat"
    | "threads"
    | "instagram"
    | "linkedIn"
    | "facebook"
    | "pinterest"
    | "whatsapp"
    | "telegram"
    | "discrod"
    | "medium"
    | "reddit"
    | "discourse"
    | "tumblr"
    | "skype"
    | "youTube"
    | "vimeo"
    | "gitHub"
    | "gitLab"
    | "behance"
    | "dribble"
    | "figma"
    | "upsplash"
    | "twitch"
    | "steam"
    | "spotify"
    | "lastFm"
    | "soundcloud"
    | "shopify";
};
export type PlasmicSocialIcons__VariantsArgs = {
  removeIcon?: MultiChoiceArg<
    | "email"
    | "xTwitter"
    | "mastadon"
    | "tikTok"
    | "snapchat"
    | "threads"
    | "instagram"
    | "linkedIn"
    | "facebook"
    | "pinterest"
    | "whatsApp"
    | "telegram"
    | "discord"
    | "medium"
    | "reddit"
    | "discourse"
    | "tumblr"
    | "skype"
    | "youTube"
    | "vimeo"
    | "gitHub"
    | "gitLab"
    | "behance"
    | "dribble"
    | "figma"
    | "upsplash"
    | "twitch"
    | "steam"
    | "spotify"
    | "lastFm"
    | "soundcloud"
    | "shopify"
  >;
  set?: SingleChoiceArg<"business" | "developer" | "designer">;
  size?: SingleChoiceArg<"sm" | "md" | "lg">;
  contrastIcons?: MultiChoiceArg<
    | "mail"
    | "x"
    | "mastadon"
    | "tikTok"
    | "snapchat"
    | "threads"
    | "instagram"
    | "linkedIn"
    | "facebook"
    | "pinterest"
    | "whatsapp"
    | "telegram"
    | "discrod"
    | "medium"
    | "reddit"
    | "discourse"
    | "tumblr"
    | "skype"
    | "youTube"
    | "vimeo"
    | "gitHub"
    | "gitLab"
    | "behance"
    | "dribble"
    | "figma"
    | "upsplash"
    | "twitch"
    | "steam"
    | "spotify"
    | "lastFm"
    | "soundcloud"
    | "shopify"
  >;
};
type VariantPropType = keyof PlasmicSocialIcons__VariantsArgs;
export const PlasmicSocialIcons__VariantProps = new Array<VariantPropType>(
  "removeIcon",
  "set",
  "size",
  "contrastIcons"
);

export type PlasmicSocialIcons__ArgsType = {
  gitLabSlot?: React.ReactNode;
  vimeoSlot?: React.ReactNode;
  redditSlot?: React.ReactNode;
  pinterestSlot?: React.ReactNode;
  instagramSlot?: React.ReactNode;
  whatsAppSlot?: React.ReactNode;
  snapchatSlot?: React.ReactNode;
  youTubeSlot?: React.ReactNode;
  xTwitterSlot?: React.ReactNode;
  facebookSlot?: React.ReactNode;
  linkedInSlot?: React.ReactNode;
  gitHubSlot?: React.ReactNode;
  spotifySlot?: React.ReactNode;
  lastFmSlot?: React.ReactNode;
  twitchSlot?: React.ReactNode;
  soundcloudSlot?: React.ReactNode;
  behanceSlot?: React.ReactNode;
  dribbleSlot?: React.ReactNode;
  figmaSlot?: React.ReactNode;
  mastadonSlot?: React.ReactNode;
  shopifySlot?: React.ReactNode;
  tikTokSlot?: React.ReactNode;
  mediumSlot?: React.ReactNode;
  steamSlot?: React.ReactNode;
  threadsSlot?: React.ReactNode;
  tumblrSlot?: React.ReactNode;
  upsplashSlot?: React.ReactNode;
  skypeSlot?: React.ReactNode;
  discourseSlot?: React.ReactNode;
  telegramSlot?: React.ReactNode;
  discordSlot?: React.ReactNode;
  emailSlot?: React.ReactNode;
};
type ArgPropType = keyof PlasmicSocialIcons__ArgsType;
export const PlasmicSocialIcons__ArgProps = new Array<ArgPropType>(
  "gitLabSlot",
  "vimeoSlot",
  "redditSlot",
  "pinterestSlot",
  "instagramSlot",
  "whatsAppSlot",
  "snapchatSlot",
  "youTubeSlot",
  "xTwitterSlot",
  "facebookSlot",
  "linkedInSlot",
  "gitHubSlot",
  "spotifySlot",
  "lastFmSlot",
  "twitchSlot",
  "soundcloudSlot",
  "behanceSlot",
  "dribbleSlot",
  "figmaSlot",
  "mastadonSlot",
  "shopifySlot",
  "tikTokSlot",
  "mediumSlot",
  "steamSlot",
  "threadsSlot",
  "tumblrSlot",
  "upsplashSlot",
  "skypeSlot",
  "discourseSlot",
  "telegramSlot",
  "discordSlot",
  "emailSlot"
);

export type PlasmicSocialIcons__OverridesType = {
  root?: Flex__<"div">;
  socialIconsBase?: Flex__<"div">;
  emailStack?: Flex__<"div">;
  xTwitterStack?: Flex__<"div">;
  mastadonStack?: Flex__<"div">;
  tikTokStack?: Flex__<"div">;
  snapchatStack?: Flex__<"div">;
  threadsStack?: Flex__<"div">;
  instagramStack?: Flex__<"div">;
  linkedInStack?: Flex__<"div">;
  facebookStack?: Flex__<"div">;
  pinterestStack?: Flex__<"div">;
  whatsAppStack?: Flex__<"div">;
  telegramStack?: Flex__<"div">;
  discordStack?: Flex__<"div">;
  mediumStack?: Flex__<"div">;
  redditStack?: Flex__<"div">;
  discourseStack?: Flex__<"div">;
  tumblrStack?: Flex__<"div">;
  skypeStack?: Flex__<"div">;
  youTubeStack?: Flex__<"div">;
  vimeoStack?: Flex__<"div">;
  gitHubStack?: Flex__<"div">;
  gitLabStack?: Flex__<"div">;
  behanceStack?: Flex__<"div">;
  dribbleStack?: Flex__<"div">;
  figmaStack?: Flex__<"div">;
  upsplashStack?: Flex__<"div">;
  twitchStack?: Flex__<"div">;
  steamStack?: Flex__<"div">;
  spotifyStack?: Flex__<"div">;
  lastFmStack?: Flex__<"div">;
  soundcloudStack?: Flex__<"div">;
  shopifyStack?: Flex__<"div">;
};

export interface DefaultSocialIconsProps {
  gitLabSlot?: React.ReactNode;
  vimeoSlot?: React.ReactNode;
  redditSlot?: React.ReactNode;
  pinterestSlot?: React.ReactNode;
  instagramSlot?: React.ReactNode;
  whatsAppSlot?: React.ReactNode;
  snapchatSlot?: React.ReactNode;
  youTubeSlot?: React.ReactNode;
  xTwitterSlot?: React.ReactNode;
  facebookSlot?: React.ReactNode;
  linkedInSlot?: React.ReactNode;
  gitHubSlot?: React.ReactNode;
  spotifySlot?: React.ReactNode;
  lastFmSlot?: React.ReactNode;
  twitchSlot?: React.ReactNode;
  soundcloudSlot?: React.ReactNode;
  behanceSlot?: React.ReactNode;
  dribbleSlot?: React.ReactNode;
  figmaSlot?: React.ReactNode;
  mastadonSlot?: React.ReactNode;
  shopifySlot?: React.ReactNode;
  tikTokSlot?: React.ReactNode;
  mediumSlot?: React.ReactNode;
  steamSlot?: React.ReactNode;
  threadsSlot?: React.ReactNode;
  tumblrSlot?: React.ReactNode;
  upsplashSlot?: React.ReactNode;
  skypeSlot?: React.ReactNode;
  discourseSlot?: React.ReactNode;
  telegramSlot?: React.ReactNode;
  discordSlot?: React.ReactNode;
  emailSlot?: React.ReactNode;
  removeIcon?: MultiChoiceArg<
    | "email"
    | "xTwitter"
    | "mastadon"
    | "tikTok"
    | "snapchat"
    | "threads"
    | "instagram"
    | "linkedIn"
    | "facebook"
    | "pinterest"
    | "whatsApp"
    | "telegram"
    | "discord"
    | "medium"
    | "reddit"
    | "discourse"
    | "tumblr"
    | "skype"
    | "youTube"
    | "vimeo"
    | "gitHub"
    | "gitLab"
    | "behance"
    | "dribble"
    | "figma"
    | "upsplash"
    | "twitch"
    | "steam"
    | "spotify"
    | "lastFm"
    | "soundcloud"
    | "shopify"
  >;
  set?: SingleChoiceArg<"business" | "developer" | "designer">;
  size?: SingleChoiceArg<"sm" | "md" | "lg">;
  contrastIcons?: MultiChoiceArg<
    | "mail"
    | "x"
    | "mastadon"
    | "tikTok"
    | "snapchat"
    | "threads"
    | "instagram"
    | "linkedIn"
    | "facebook"
    | "pinterest"
    | "whatsapp"
    | "telegram"
    | "discrod"
    | "medium"
    | "reddit"
    | "discourse"
    | "tumblr"
    | "skype"
    | "youTube"
    | "vimeo"
    | "gitHub"
    | "gitLab"
    | "behance"
    | "dribble"
    | "figma"
    | "upsplash"
    | "twitch"
    | "steam"
    | "spotify"
    | "lastFm"
    | "soundcloud"
    | "shopify"
  >;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSocialIcons__RenderFunc(props: {
  variants: PlasmicSocialIcons__VariantsArgs;
  args: PlasmicSocialIcons__ArgsType;
  overrides: PlasmicSocialIcons__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "removeIcon",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.removeIcon
      },
      {
        path: "set",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.set
      },
      {
        path: "size",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.size
      },
      {
        path: "contrastIcons",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.contrastIcons
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    mode: useMode()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_core_css.plasmic_tokens,
        plasmic_semantic_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_core_css.global_mode_dark]: hasVariant(
            globalVariants,
            "mode",
            "dark"
          ),
          [sty.rootsize_lg]: hasVariant($state, "size", "lg"),
          [sty.rootsize_sm]: hasVariant($state, "size", "sm")
        }
      )}
    >
      <div
        data-plasmic-name={"socialIconsBase"}
        data-plasmic-override={overrides.socialIconsBase}
        className={classNames(projectcss.all, sty.socialIconsBase, {
          [sty.socialIconsBasecontrastIcons_lastFm]: hasVariant(
            $state,
            "contrastIcons",
            "lastFm"
          ),
          [sty.socialIconsBasesize_sm]: hasVariant($state, "size", "sm")
        })}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"emailStack"}
          data-plasmic-override={overrides.emailStack}
          hasGap={true}
          className={classNames(projectcss.all, sty.emailStack, {
            [sty.emailStackremoveIcon_xTwitter]: hasVariant(
              $state,
              "removeIcon",
              "xTwitter"
            ),
            [sty.emailStackset_designer]: hasVariant($state, "set", "designer"),
            [sty.emailStackset_developer]: hasVariant(
              $state,
              "set",
              "developer"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <FaEnvelopeRegularsvgIcon
                className={classNames(projectcss.all, sty.svg__gXfxB)}
                role={"img"}
              />
            ),

            value: args.emailSlot,
            className: classNames(sty.slotTargetEmailSlot, {
              [sty.slotTargetEmailSlotcontrastIcons_mail]: hasVariant(
                $state,
                "contrastIcons",
                "mail"
              )
            })
          })}
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"xTwitterStack"}
          data-plasmic-override={overrides.xTwitterStack}
          hasGap={true}
          className={classNames(projectcss.all, sty.xTwitterStack, {
            [sty.xTwitterStackremoveIcon_xTwitter]: hasVariant(
              $state,
              "removeIcon",
              "xTwitter"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <FaXTwittersvgIcon
                className={classNames(projectcss.all, sty.svg__kY0U3)}
                role={"img"}
              />
            ),

            value: args.xTwitterSlot,
            className: classNames(sty.slotTargetXTwitterSlot, {
              [sty.slotTargetXTwitterSlotcontrastIcons_mail]: hasVariant(
                $state,
                "contrastIcons",
                "mail"
              ),
              [sty.slotTargetXTwitterSlotcontrastIcons_x]: hasVariant(
                $state,
                "contrastIcons",
                "x"
              )
            })
          })}
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"mastadonStack"}
          data-plasmic-override={overrides.mastadonStack}
          hasGap={true}
          className={classNames(projectcss.all, sty.mastadonStack, {
            [sty.mastadonStackremoveIcon_mastadon]: hasVariant(
              $state,
              "removeIcon",
              "mastadon"
            ),
            [sty.mastadonStackset_business]: hasVariant(
              $state,
              "set",
              "business"
            ),
            [sty.mastadonStackset_designer]: hasVariant(
              $state,
              "set",
              "designer"
            ),
            [sty.mastadonStackset_developer]: hasVariant(
              $state,
              "set",
              "developer"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <FaMastodonsvgIcon
                className={classNames(projectcss.all, sty.svg__wm8TT)}
                role={"img"}
              />
            ),

            value: args.mastadonSlot,
            className: classNames(sty.slotTargetMastadonSlot, {
              [sty.slotTargetMastadonSlotcontrastIcons_mastadon]: hasVariant(
                $state,
                "contrastIcons",
                "mastadon"
              )
            })
          })}
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"tikTokStack"}
          data-plasmic-override={overrides.tikTokStack}
          hasGap={true}
          className={classNames(projectcss.all, sty.tikTokStack, {
            [sty.tikTokStackremoveIcon_tikTok]: hasVariant(
              $state,
              "removeIcon",
              "tikTok"
            ),
            [sty.tikTokStackset_business]: hasVariant(
              $state,
              "set",
              "business"
            ),
            [sty.tikTokStackset_designer]: hasVariant(
              $state,
              "set",
              "designer"
            ),
            [sty.tikTokStackset_developer]: hasVariant(
              $state,
              "set",
              "developer"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <FaTiktoksvgIcon
                className={classNames(projectcss.all, sty.svg__asr9W)}
                role={"img"}
              />
            ),

            value: args.tikTokSlot,
            className: classNames(sty.slotTargetTikTokSlot, {
              [sty.slotTargetTikTokSlotcontrastIcons_tikTok]: hasVariant(
                $state,
                "contrastIcons",
                "tikTok"
              )
            })
          })}
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"snapchatStack"}
          data-plasmic-override={overrides.snapchatStack}
          hasGap={true}
          className={classNames(projectcss.all, sty.snapchatStack, {
            [sty.snapchatStackremoveIcon_snapchat]: hasVariant(
              $state,
              "removeIcon",
              "snapchat"
            ),
            [sty.snapchatStackset_business]: hasVariant(
              $state,
              "set",
              "business"
            ),
            [sty.snapchatStackset_designer]: hasVariant(
              $state,
              "set",
              "designer"
            ),
            [sty.snapchatStackset_developer]: hasVariant(
              $state,
              "set",
              "developer"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <FaSnapchatsvgIcon
                className={classNames(projectcss.all, sty.svg__kjviQ)}
                role={"img"}
              />
            ),

            value: args.snapchatSlot,
            className: classNames(sty.slotTargetSnapchatSlot, {
              [sty.slotTargetSnapchatSlotcontrastIcons_snapchat]: hasVariant(
                $state,
                "contrastIcons",
                "snapchat"
              )
            })
          })}
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"threadsStack"}
          data-plasmic-override={overrides.threadsStack}
          hasGap={true}
          className={classNames(projectcss.all, sty.threadsStack, {
            [sty.threadsStackremoveIcon_threads]: hasVariant(
              $state,
              "removeIcon",
              "threads"
            ),
            [sty.threadsStackset_business]: hasVariant(
              $state,
              "set",
              "business"
            ),
            [sty.threadsStackset_designer]: hasVariant(
              $state,
              "set",
              "designer"
            ),
            [sty.threadsStackset_developer]: hasVariant(
              $state,
              "set",
              "developer"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <FaThreadssvgIcon
                className={classNames(projectcss.all, sty.svg__nZwrn)}
                role={"img"}
              />
            ),

            value: args.threadsSlot,
            className: classNames(sty.slotTargetThreadsSlot, {
              [sty.slotTargetThreadsSlotcontrastIcons_threads]: hasVariant(
                $state,
                "contrastIcons",
                "threads"
              )
            })
          })}
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"instagramStack"}
          data-plasmic-override={overrides.instagramStack}
          hasGap={true}
          className={classNames(projectcss.all, sty.instagramStack, {
            [sty.instagramStackremoveIcon_instagram]: hasVariant(
              $state,
              "removeIcon",
              "instagram"
            ),
            [sty.instagramStackset_designer]: hasVariant(
              $state,
              "set",
              "designer"
            ),
            [sty.instagramStackset_developer]: hasVariant(
              $state,
              "set",
              "developer"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <FaInstagramsvgIcon
                className={classNames(projectcss.all, sty.svg__vv7U)}
                role={"img"}
              />
            ),

            value: args.instagramSlot,
            className: classNames(sty.slotTargetInstagramSlot, {
              [sty.slotTargetInstagramSlotcontrastIcons_instagram]: hasVariant(
                $state,
                "contrastIcons",
                "instagram"
              )
            })
          })}
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"linkedInStack"}
          data-plasmic-override={overrides.linkedInStack}
          hasGap={true}
          className={classNames(projectcss.all, sty.linkedInStack, {
            [sty.linkedInStackremoveIcon_linkedIn]: hasVariant(
              $state,
              "removeIcon",
              "linkedIn"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <FaLinkedinInsvgIcon
                className={classNames(projectcss.all, sty.svg___9UyJ7)}
                role={"img"}
              />
            ),

            value: args.linkedInSlot,
            className: classNames(sty.slotTargetLinkedInSlot, {
              [sty.slotTargetLinkedInSlotcontrastIcons_linkedIn]: hasVariant(
                $state,
                "contrastIcons",
                "linkedIn"
              )
            })
          })}
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"facebookStack"}
          data-plasmic-override={overrides.facebookStack}
          hasGap={true}
          className={classNames(projectcss.all, sty.facebookStack, {
            [sty.facebookStackremoveIcon_facebook]: hasVariant(
              $state,
              "removeIcon",
              "facebook"
            ),
            [sty.facebookStackset_designer]: hasVariant(
              $state,
              "set",
              "designer"
            ),
            [sty.facebookStackset_developer]: hasVariant(
              $state,
              "set",
              "developer"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <FaFacebookFsvgIcon
                className={classNames(projectcss.all, sty.svg__rvRf)}
                role={"img"}
              />
            ),

            value: args.facebookSlot,
            className: classNames(sty.slotTargetFacebookSlot, {
              [sty.slotTargetFacebookSlotcontrastIcons_facebook]: hasVariant(
                $state,
                "contrastIcons",
                "facebook"
              )
            })
          })}
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"pinterestStack"}
          data-plasmic-override={overrides.pinterestStack}
          hasGap={true}
          className={classNames(projectcss.all, sty.pinterestStack, {
            [sty.pinterestStackremoveIcon_pinterest]: hasVariant(
              $state,
              "removeIcon",
              "pinterest"
            ),
            [sty.pinterestStackset_business]: hasVariant(
              $state,
              "set",
              "business"
            ),
            [sty.pinterestStackset_designer]: hasVariant(
              $state,
              "set",
              "designer"
            ),
            [sty.pinterestStackset_developer]: hasVariant(
              $state,
              "set",
              "developer"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <FaSquarePinterestsvgIcon
                className={classNames(projectcss.all, sty.svg__vpUcs)}
                role={"img"}
              />
            ),

            value: args.pinterestSlot,
            className: classNames(sty.slotTargetPinterestSlot, {
              [sty.slotTargetPinterestSlotcontrastIcons_pinterest]: hasVariant(
                $state,
                "contrastIcons",
                "pinterest"
              )
            })
          })}
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"whatsAppStack"}
          data-plasmic-override={overrides.whatsAppStack}
          hasGap={true}
          className={classNames(projectcss.all, sty.whatsAppStack, {
            [sty.whatsAppStackremoveIcon_whatsApp]: hasVariant(
              $state,
              "removeIcon",
              "whatsApp"
            ),
            [sty.whatsAppStackset_business]: hasVariant(
              $state,
              "set",
              "business"
            ),
            [sty.whatsAppStackset_designer]: hasVariant(
              $state,
              "set",
              "designer"
            ),
            [sty.whatsAppStackset_developer]: hasVariant(
              $state,
              "set",
              "developer"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <FaWhatsappsvgIcon
                className={classNames(projectcss.all, sty.svg__jM5Yv)}
                role={"img"}
              />
            ),

            value: args.whatsAppSlot,
            className: classNames(sty.slotTargetWhatsAppSlot, {
              [sty.slotTargetWhatsAppSlotcontrastIcons_whatsapp]: hasVariant(
                $state,
                "contrastIcons",
                "whatsapp"
              )
            })
          })}
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"telegramStack"}
          data-plasmic-override={overrides.telegramStack}
          hasGap={true}
          className={classNames(projectcss.all, sty.telegramStack, {
            [sty.telegramStackremoveIcon_telegram]: hasVariant(
              $state,
              "removeIcon",
              "telegram"
            ),
            [sty.telegramStackset_business]: hasVariant(
              $state,
              "set",
              "business"
            ),
            [sty.telegramStackset_designer]: hasVariant(
              $state,
              "set",
              "designer"
            ),
            [sty.telegramStackset_developer]: hasVariant(
              $state,
              "set",
              "developer"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <FaTelegramsvgIcon
                className={classNames(projectcss.all, sty.svg__cYcXo)}
                role={"img"}
              />
            ),

            value: args.telegramSlot,
            className: classNames(sty.slotTargetTelegramSlot, {
              [sty.slotTargetTelegramSlotcontrastIcons_telegram]: hasVariant(
                $state,
                "contrastIcons",
                "telegram"
              )
            })
          })}
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"discordStack"}
          data-plasmic-override={overrides.discordStack}
          hasGap={true}
          className={classNames(projectcss.all, sty.discordStack, {
            [sty.discordStackremoveIcon_discord]: hasVariant(
              $state,
              "removeIcon",
              "discord"
            ),
            [sty.discordStackset_business]: hasVariant(
              $state,
              "set",
              "business"
            ),
            [sty.discordStackset_designer]: hasVariant(
              $state,
              "set",
              "designer"
            ),
            [sty.discordStackset_developer]: hasVariant(
              $state,
              "set",
              "developer"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <FaDiscordsvgIcon
                className={classNames(projectcss.all, sty.svg__mDy0X)}
                role={"img"}
              />
            ),

            value: args.discordSlot,
            className: classNames(sty.slotTargetDiscordSlot, {
              [sty.slotTargetDiscordSlotcontrastIcons_discrod]: hasVariant(
                $state,
                "contrastIcons",
                "discrod"
              )
            })
          })}
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"mediumStack"}
          data-plasmic-override={overrides.mediumStack}
          hasGap={true}
          className={classNames(projectcss.all, sty.mediumStack, {
            [sty.mediumStackremoveIcon_medium]: hasVariant(
              $state,
              "removeIcon",
              "medium"
            ),
            [sty.mediumStackset_business]: hasVariant(
              $state,
              "set",
              "business"
            ),
            [sty.mediumStackset_designer]: hasVariant(
              $state,
              "set",
              "designer"
            ),
            [sty.mediumStackset_developer]: hasVariant(
              $state,
              "set",
              "developer"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <FaMediumsvgIcon
                className={classNames(projectcss.all, sty.svg__ksbAy)}
                role={"img"}
              />
            ),

            value: args.mediumSlot,
            className: classNames(sty.slotTargetMediumSlot, {
              [sty.slotTargetMediumSlotcontrastIcons_medium]: hasVariant(
                $state,
                "contrastIcons",
                "medium"
              )
            })
          })}
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"redditStack"}
          data-plasmic-override={overrides.redditStack}
          hasGap={true}
          className={classNames(projectcss.all, sty.redditStack, {
            [sty.redditStackremoveIcon_reddit]: hasVariant(
              $state,
              "removeIcon",
              "reddit"
            ),
            [sty.redditStackset_business]: hasVariant(
              $state,
              "set",
              "business"
            ),
            [sty.redditStackset_designer]: hasVariant($state, "set", "designer")
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <FaRedditsvgIcon
                className={classNames(projectcss.all, sty.svg__g8X7V)}
                role={"img"}
              />
            ),

            value: args.redditSlot,
            className: classNames(sty.slotTargetRedditSlot, {
              [sty.slotTargetRedditSlotcontrastIcons_reddit]: hasVariant(
                $state,
                "contrastIcons",
                "reddit"
              )
            })
          })}
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"discourseStack"}
          data-plasmic-override={overrides.discourseStack}
          hasGap={true}
          className={classNames(projectcss.all, sty.discourseStack, {
            [sty.discourseStackremoveIcon_discourse]: hasVariant(
              $state,
              "removeIcon",
              "discourse"
            ),
            [sty.discourseStackset_business]: hasVariant(
              $state,
              "set",
              "business"
            ),
            [sty.discourseStackset_designer]: hasVariant(
              $state,
              "set",
              "designer"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <FaDiscoursesvgIcon
                className={classNames(projectcss.all, sty.svg__rcCTl)}
                role={"img"}
              />
            ),

            value: args.discourseSlot,
            className: classNames(sty.slotTargetDiscourseSlot, {
              [sty.slotTargetDiscourseSlotcontrastIcons_discourse]: hasVariant(
                $state,
                "contrastIcons",
                "discourse"
              )
            })
          })}
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"tumblrStack"}
          data-plasmic-override={overrides.tumblrStack}
          hasGap={true}
          className={classNames(projectcss.all, sty.tumblrStack, {
            [sty.tumblrStackremoveIcon_tumblr]: hasVariant(
              $state,
              "removeIcon",
              "tumblr"
            ),
            [sty.tumblrStackset_business]: hasVariant(
              $state,
              "set",
              "business"
            ),
            [sty.tumblrStackset_designer]: hasVariant(
              $state,
              "set",
              "designer"
            ),
            [sty.tumblrStackset_developer]: hasVariant(
              $state,
              "set",
              "developer"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <FaTumblrsvgIcon
                className={classNames(projectcss.all, sty.svg__tVvDw)}
                role={"img"}
              />
            ),

            value: args.tumblrSlot,
            className: classNames(sty.slotTargetTumblrSlot, {
              [sty.slotTargetTumblrSlotcontrastIcons_tumblr]: hasVariant(
                $state,
                "contrastIcons",
                "tumblr"
              )
            })
          })}
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"skypeStack"}
          data-plasmic-override={overrides.skypeStack}
          hasGap={true}
          className={classNames(projectcss.all, sty.skypeStack, {
            [sty.skypeStackremoveIcon_skype]: hasVariant(
              $state,
              "removeIcon",
              "skype"
            ),
            [sty.skypeStackset_business]: hasVariant($state, "set", "business"),
            [sty.skypeStackset_designer]: hasVariant($state, "set", "designer"),
            [sty.skypeStackset_developer]: hasVariant(
              $state,
              "set",
              "developer"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <FaSkypesvgIcon
                className={classNames(projectcss.all, sty.svg__oPeoM)}
                role={"img"}
              />
            ),

            value: args.skypeSlot,
            className: classNames(sty.slotTargetSkypeSlot, {
              [sty.slotTargetSkypeSlotcontrastIcons_skype]: hasVariant(
                $state,
                "contrastIcons",
                "skype"
              )
            })
          })}
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"youTubeStack"}
          data-plasmic-override={overrides.youTubeStack}
          hasGap={true}
          className={classNames(projectcss.all, sty.youTubeStack, {
            [sty.youTubeStackremoveIcon_youTube]: hasVariant(
              $state,
              "removeIcon",
              "youTube"
            ),
            [sty.youTubeStackset_designer]: hasVariant(
              $state,
              "set",
              "designer"
            ),
            [sty.youTubeStackset_developer]: hasVariant(
              $state,
              "set",
              "developer"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <FaYoutubesvgIcon
                className={classNames(projectcss.all, sty.svg___6Rq2K)}
                role={"img"}
              />
            ),

            value: args.youTubeSlot,
            className: classNames(sty.slotTargetYouTubeSlot, {
              [sty.slotTargetYouTubeSlotcontrastIcons_youTube]: hasVariant(
                $state,
                "contrastIcons",
                "youTube"
              )
            })
          })}
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"vimeoStack"}
          data-plasmic-override={overrides.vimeoStack}
          hasGap={true}
          className={classNames(projectcss.all, sty.vimeoStack, {
            [sty.vimeoStackremoveIcon_vimeo]: hasVariant(
              $state,
              "removeIcon",
              "vimeo"
            ),
            [sty.vimeoStackset_business]: hasVariant($state, "set", "business"),
            [sty.vimeoStackset_designer]: hasVariant($state, "set", "designer"),
            [sty.vimeoStackset_developer]: hasVariant(
              $state,
              "set",
              "developer"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <FaVimeoVsvgIcon
                className={classNames(projectcss.all, sty.svg__ne5Ny)}
                role={"img"}
              />
            ),

            value: args.vimeoSlot,
            className: classNames(sty.slotTargetVimeoSlot, {
              [sty.slotTargetVimeoSlotcontrastIcons_vimeo]: hasVariant(
                $state,
                "contrastIcons",
                "vimeo"
              )
            })
          })}
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"gitHubStack"}
          data-plasmic-override={overrides.gitHubStack}
          hasGap={true}
          className={classNames(projectcss.all, sty.gitHubStack, {
            [sty.gitHubStackremoveIcon_gitHub]: hasVariant(
              $state,
              "removeIcon",
              "gitHub"
            ),
            [sty.gitHubStackset_business]: hasVariant(
              $state,
              "set",
              "business"
            ),
            [sty.gitHubStackset_designer]: hasVariant($state, "set", "designer")
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <FaGithubsvgIcon
                className={classNames(projectcss.all, sty.svg__nrVwq)}
                role={"img"}
              />
            ),

            value: args.gitHubSlot,
            className: classNames(sty.slotTargetGitHubSlot, {
              [sty.slotTargetGitHubSlotcontrastIcons_gitHub]: hasVariant(
                $state,
                "contrastIcons",
                "gitHub"
              )
            })
          })}
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"gitLabStack"}
          data-plasmic-override={overrides.gitLabStack}
          hasGap={true}
          className={classNames(projectcss.all, sty.gitLabStack, {
            [sty.gitLabStackremoveIcon_gitLab]: hasVariant(
              $state,
              "removeIcon",
              "gitLab"
            ),
            [sty.gitLabStackset_business]: hasVariant(
              $state,
              "set",
              "business"
            ),
            [sty.gitLabStackset_designer]: hasVariant($state, "set", "designer")
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <FaGitlabsvgIcon
                className={classNames(projectcss.all, sty.svg___6URmN)}
                role={"img"}
              />
            ),

            value: args.gitLabSlot,
            className: classNames(sty.slotTargetGitLabSlot, {
              [sty.slotTargetGitLabSlotcontrastIcons_gitLab]: hasVariant(
                $state,
                "contrastIcons",
                "gitLab"
              )
            })
          })}
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"behanceStack"}
          data-plasmic-override={overrides.behanceStack}
          hasGap={true}
          className={classNames(projectcss.all, sty.behanceStack, {
            [sty.behanceStackremoveIcon_behance]: hasVariant(
              $state,
              "removeIcon",
              "behance"
            ),
            [sty.behanceStackset_business]: hasVariant(
              $state,
              "set",
              "business"
            ),
            [sty.behanceStackset_developer]: hasVariant(
              $state,
              "set",
              "developer"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <FaBehancesvgIcon
                className={classNames(projectcss.all, sty.svg__aSkQ9)}
                role={"img"}
              />
            ),

            value: args.behanceSlot,
            className: classNames(sty.slotTargetBehanceSlot, {
              [sty.slotTargetBehanceSlotcontrastIcons_behance]: hasVariant(
                $state,
                "contrastIcons",
                "behance"
              )
            })
          })}
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"dribbleStack"}
          data-plasmic-override={overrides.dribbleStack}
          hasGap={true}
          className={classNames(projectcss.all, sty.dribbleStack, {
            [sty.dribbleStackremoveIcon_dribble]: hasVariant(
              $state,
              "removeIcon",
              "dribble"
            ),
            [sty.dribbleStackset_business]: hasVariant(
              $state,
              "set",
              "business"
            ),
            [sty.dribbleStackset_developer]: hasVariant(
              $state,
              "set",
              "developer"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <FaDribbblesvgIcon
                className={classNames(projectcss.all, sty.svg__g8VfX)}
                role={"img"}
              />
            ),

            value: args.dribbleSlot,
            className: classNames(sty.slotTargetDribbleSlot, {
              [sty.slotTargetDribbleSlotcontrastIcons_dribble]: hasVariant(
                $state,
                "contrastIcons",
                "dribble"
              )
            })
          })}
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"figmaStack"}
          data-plasmic-override={overrides.figmaStack}
          hasGap={true}
          className={classNames(projectcss.all, sty.figmaStack, {
            [sty.figmaStackremoveIcon_figma]: hasVariant(
              $state,
              "removeIcon",
              "figma"
            ),
            [sty.figmaStackset_business]: hasVariant($state, "set", "business"),
            [sty.figmaStackset_developer]: hasVariant(
              $state,
              "set",
              "developer"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <FaFigmasvgIcon
                className={classNames(projectcss.all, sty.svg___88Cjw)}
                role={"img"}
              />
            ),

            value: args.figmaSlot,
            className: classNames(sty.slotTargetFigmaSlot, {
              [sty.slotTargetFigmaSlotcontrastIcons_figma]: hasVariant(
                $state,
                "contrastIcons",
                "figma"
              )
            })
          })}
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"upsplashStack"}
          data-plasmic-override={overrides.upsplashStack}
          hasGap={true}
          className={classNames(projectcss.all, sty.upsplashStack, {
            [sty.upsplashStackremoveIcon_upsplash]: hasVariant(
              $state,
              "removeIcon",
              "upsplash"
            ),
            [sty.upsplashStackset_business]: hasVariant(
              $state,
              "set",
              "business"
            ),
            [sty.upsplashStackset_developer]: hasVariant(
              $state,
              "set",
              "developer"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <FaUnsplashsvgIcon
                className={classNames(projectcss.all, sty.svg__uAdKh)}
                role={"img"}
              />
            ),

            value: args.upsplashSlot,
            className: classNames(sty.slotTargetUpsplashSlot, {
              [sty.slotTargetUpsplashSlotcontrastIcons_figma]: hasVariant(
                $state,
                "contrastIcons",
                "figma"
              ),
              [sty.slotTargetUpsplashSlotcontrastIcons_upsplash]: hasVariant(
                $state,
                "contrastIcons",
                "upsplash"
              )
            })
          })}
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"twitchStack"}
          data-plasmic-override={overrides.twitchStack}
          hasGap={true}
          className={classNames(projectcss.all, sty.twitchStack, {
            [sty.twitchStackremoveIcon_twitch]: hasVariant(
              $state,
              "removeIcon",
              "twitch"
            ),
            [sty.twitchStackset_business]: hasVariant(
              $state,
              "set",
              "business"
            ),
            [sty.twitchStackset_designer]: hasVariant(
              $state,
              "set",
              "designer"
            ),
            [sty.twitchStackset_developer]: hasVariant(
              $state,
              "set",
              "developer"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <FaTwitchsvgIcon
                className={classNames(projectcss.all, sty.svg__vcO6B)}
                role={"img"}
              />
            ),

            value: args.twitchSlot,
            className: classNames(sty.slotTargetTwitchSlot, {
              [sty.slotTargetTwitchSlotcontrastIcons_steam]: hasVariant(
                $state,
                "contrastIcons",
                "steam"
              ),
              [sty.slotTargetTwitchSlotcontrastIcons_twitch]: hasVariant(
                $state,
                "contrastIcons",
                "twitch"
              )
            })
          })}
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"steamStack"}
          data-plasmic-override={overrides.steamStack}
          hasGap={true}
          className={classNames(projectcss.all, sty.steamStack, {
            [sty.steamStackremoveIcon_steam]: hasVariant(
              $state,
              "removeIcon",
              "steam"
            ),
            [sty.steamStackset_business]: hasVariant($state, "set", "business"),
            [sty.steamStackset_designer]: hasVariant($state, "set", "designer"),
            [sty.steamStackset_developer]: hasVariant(
              $state,
              "set",
              "developer"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <FaSteamsvgIcon
                className={classNames(projectcss.all, sty.svg__jgDbR)}
                role={"img"}
              />
            ),

            value: args.steamSlot,
            className: classNames(sty.slotTargetSteamSlot, {
              [sty.slotTargetSteamSlotcontrastIcons_steam]: hasVariant(
                $state,
                "contrastIcons",
                "steam"
              )
            })
          })}
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"spotifyStack"}
          data-plasmic-override={overrides.spotifyStack}
          hasGap={true}
          className={classNames(projectcss.all, sty.spotifyStack, {
            [sty.spotifyStackremoveIcon_spotify]: hasVariant(
              $state,
              "removeIcon",
              "spotify"
            ),
            [sty.spotifyStackset_business]: hasVariant(
              $state,
              "set",
              "business"
            ),
            [sty.spotifyStackset_designer]: hasVariant(
              $state,
              "set",
              "designer"
            ),
            [sty.spotifyStackset_developer]: hasVariant(
              $state,
              "set",
              "developer"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <FaSpotifysvgIcon
                className={classNames(projectcss.all, sty.svg__xpgi6)}
                role={"img"}
              />
            ),

            value: args.spotifySlot,
            className: classNames(sty.slotTargetSpotifySlot, {
              [sty.slotTargetSpotifySlotcontrastIcons_spotify]: hasVariant(
                $state,
                "contrastIcons",
                "spotify"
              ),
              [sty.slotTargetSpotifySlotremoveIcon_lastFm]: hasVariant(
                $state,
                "removeIcon",
                "lastFm"
              )
            })
          })}
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"lastFmStack"}
          data-plasmic-override={overrides.lastFmStack}
          hasGap={true}
          className={classNames(projectcss.all, sty.lastFmStack, {
            [sty.lastFmStackremoveIcon_lastFm]: hasVariant(
              $state,
              "removeIcon",
              "lastFm"
            ),
            [sty.lastFmStackset_business]: hasVariant(
              $state,
              "set",
              "business"
            ),
            [sty.lastFmStackset_designer]: hasVariant(
              $state,
              "set",
              "designer"
            ),
            [sty.lastFmStackset_developer]: hasVariant(
              $state,
              "set",
              "developer"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <FaLastfmsvgIcon
                className={classNames(projectcss.all, sty.svg___7LdIq)}
                role={"img"}
              />
            ),

            value: args.lastFmSlot,
            className: classNames(sty.slotTargetLastFmSlot, {
              [sty.slotTargetLastFmSlotcontrastIcons_lastFm]: hasVariant(
                $state,
                "contrastIcons",
                "lastFm"
              )
            })
          })}
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"soundcloudStack"}
          data-plasmic-override={overrides.soundcloudStack}
          hasGap={true}
          className={classNames(projectcss.all, sty.soundcloudStack, {
            [sty.soundcloudStackremoveIcon_soundcloud]: hasVariant(
              $state,
              "removeIcon",
              "soundcloud"
            ),
            [sty.soundcloudStackset_business]: hasVariant(
              $state,
              "set",
              "business"
            ),
            [sty.soundcloudStackset_designer]: hasVariant(
              $state,
              "set",
              "designer"
            ),
            [sty.soundcloudStackset_developer]: hasVariant(
              $state,
              "set",
              "developer"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <FaSoundcloudsvgIcon
                className={classNames(projectcss.all, sty.svg__gnDn)}
                role={"img"}
              />
            ),

            value: args.soundcloudSlot,
            className: classNames(sty.slotTargetSoundcloudSlot, {
              [sty.slotTargetSoundcloudSlotcontrastIcons_soundcloud]:
                hasVariant($state, "contrastIcons", "soundcloud")
            })
          })}
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"shopifyStack"}
          data-plasmic-override={overrides.shopifyStack}
          hasGap={true}
          className={classNames(projectcss.all, sty.shopifyStack, {
            [sty.shopifyStackremoveIcon_shopify]: hasVariant(
              $state,
              "removeIcon",
              "shopify"
            ),
            [sty.shopifyStackremoveIcon_soundcloud]: hasVariant(
              $state,
              "removeIcon",
              "soundcloud"
            ),
            [sty.shopifyStackset_business]: hasVariant(
              $state,
              "set",
              "business"
            ),
            [sty.shopifyStackset_designer]: hasVariant(
              $state,
              "set",
              "designer"
            ),
            [sty.shopifyStackset_developer]: hasVariant(
              $state,
              "set",
              "developer"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <FaShopifysvgIcon
                className={classNames(projectcss.all, sty.svg__oOsAk)}
                role={"img"}
              />
            ),

            value: args.shopifySlot,
            className: classNames(sty.slotTargetShopifySlot, {
              [sty.slotTargetShopifySlotcontrastIcons_shopify]: hasVariant(
                $state,
                "contrastIcons",
                "shopify"
              )
            })
          })}
        </Stack__>
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "socialIconsBase",
    "emailStack",
    "xTwitterStack",
    "mastadonStack",
    "tikTokStack",
    "snapchatStack",
    "threadsStack",
    "instagramStack",
    "linkedInStack",
    "facebookStack",
    "pinterestStack",
    "whatsAppStack",
    "telegramStack",
    "discordStack",
    "mediumStack",
    "redditStack",
    "discourseStack",
    "tumblrStack",
    "skypeStack",
    "youTubeStack",
    "vimeoStack",
    "gitHubStack",
    "gitLabStack",
    "behanceStack",
    "dribbleStack",
    "figmaStack",
    "upsplashStack",
    "twitchStack",
    "steamStack",
    "spotifyStack",
    "lastFmStack",
    "soundcloudStack",
    "shopifyStack"
  ],
  socialIconsBase: [
    "socialIconsBase",
    "emailStack",
    "xTwitterStack",
    "mastadonStack",
    "tikTokStack",
    "snapchatStack",
    "threadsStack",
    "instagramStack",
    "linkedInStack",
    "facebookStack",
    "pinterestStack",
    "whatsAppStack",
    "telegramStack",
    "discordStack",
    "mediumStack",
    "redditStack",
    "discourseStack",
    "tumblrStack",
    "skypeStack",
    "youTubeStack",
    "vimeoStack",
    "gitHubStack",
    "gitLabStack",
    "behanceStack",
    "dribbleStack",
    "figmaStack",
    "upsplashStack",
    "twitchStack",
    "steamStack",
    "spotifyStack",
    "lastFmStack",
    "soundcloudStack",
    "shopifyStack"
  ],
  emailStack: ["emailStack"],
  xTwitterStack: ["xTwitterStack"],
  mastadonStack: ["mastadonStack"],
  tikTokStack: ["tikTokStack"],
  snapchatStack: ["snapchatStack"],
  threadsStack: ["threadsStack"],
  instagramStack: ["instagramStack"],
  linkedInStack: ["linkedInStack"],
  facebookStack: ["facebookStack"],
  pinterestStack: ["pinterestStack"],
  whatsAppStack: ["whatsAppStack"],
  telegramStack: ["telegramStack"],
  discordStack: ["discordStack"],
  mediumStack: ["mediumStack"],
  redditStack: ["redditStack"],
  discourseStack: ["discourseStack"],
  tumblrStack: ["tumblrStack"],
  skypeStack: ["skypeStack"],
  youTubeStack: ["youTubeStack"],
  vimeoStack: ["vimeoStack"],
  gitHubStack: ["gitHubStack"],
  gitLabStack: ["gitLabStack"],
  behanceStack: ["behanceStack"],
  dribbleStack: ["dribbleStack"],
  figmaStack: ["figmaStack"],
  upsplashStack: ["upsplashStack"],
  twitchStack: ["twitchStack"],
  steamStack: ["steamStack"],
  spotifyStack: ["spotifyStack"],
  lastFmStack: ["lastFmStack"],
  soundcloudStack: ["soundcloudStack"],
  shopifyStack: ["shopifyStack"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  socialIconsBase: "div";
  emailStack: "div";
  xTwitterStack: "div";
  mastadonStack: "div";
  tikTokStack: "div";
  snapchatStack: "div";
  threadsStack: "div";
  instagramStack: "div";
  linkedInStack: "div";
  facebookStack: "div";
  pinterestStack: "div";
  whatsAppStack: "div";
  telegramStack: "div";
  discordStack: "div";
  mediumStack: "div";
  redditStack: "div";
  discourseStack: "div";
  tumblrStack: "div";
  skypeStack: "div";
  youTubeStack: "div";
  vimeoStack: "div";
  gitHubStack: "div";
  gitLabStack: "div";
  behanceStack: "div";
  dribbleStack: "div";
  figmaStack: "div";
  upsplashStack: "div";
  twitchStack: "div";
  steamStack: "div";
  spotifyStack: "div";
  lastFmStack: "div";
  soundcloudStack: "div";
  shopifyStack: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSocialIcons__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSocialIcons__VariantsArgs;
    args?: PlasmicSocialIcons__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSocialIcons__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSocialIcons__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSocialIcons__ArgProps,
          internalVariantPropNames: PlasmicSocialIcons__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSocialIcons__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSocialIcons";
  } else {
    func.displayName = `PlasmicSocialIcons.${nodeName}`;
  }
  return func;
}

export const PlasmicSocialIcons = Object.assign(
  // Top-level PlasmicSocialIcons renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    socialIconsBase: makeNodeComponent("socialIconsBase"),
    emailStack: makeNodeComponent("emailStack"),
    xTwitterStack: makeNodeComponent("xTwitterStack"),
    mastadonStack: makeNodeComponent("mastadonStack"),
    tikTokStack: makeNodeComponent("tikTokStack"),
    snapchatStack: makeNodeComponent("snapchatStack"),
    threadsStack: makeNodeComponent("threadsStack"),
    instagramStack: makeNodeComponent("instagramStack"),
    linkedInStack: makeNodeComponent("linkedInStack"),
    facebookStack: makeNodeComponent("facebookStack"),
    pinterestStack: makeNodeComponent("pinterestStack"),
    whatsAppStack: makeNodeComponent("whatsAppStack"),
    telegramStack: makeNodeComponent("telegramStack"),
    discordStack: makeNodeComponent("discordStack"),
    mediumStack: makeNodeComponent("mediumStack"),
    redditStack: makeNodeComponent("redditStack"),
    discourseStack: makeNodeComponent("discourseStack"),
    tumblrStack: makeNodeComponent("tumblrStack"),
    skypeStack: makeNodeComponent("skypeStack"),
    youTubeStack: makeNodeComponent("youTubeStack"),
    vimeoStack: makeNodeComponent("vimeoStack"),
    gitHubStack: makeNodeComponent("gitHubStack"),
    gitLabStack: makeNodeComponent("gitLabStack"),
    behanceStack: makeNodeComponent("behanceStack"),
    dribbleStack: makeNodeComponent("dribbleStack"),
    figmaStack: makeNodeComponent("figmaStack"),
    upsplashStack: makeNodeComponent("upsplashStack"),
    twitchStack: makeNodeComponent("twitchStack"),
    steamStack: makeNodeComponent("steamStack"),
    spotifyStack: makeNodeComponent("spotifyStack"),
    lastFmStack: makeNodeComponent("lastFmStack"),
    soundcloudStack: makeNodeComponent("soundcloudStack"),
    shopifyStack: makeNodeComponent("shopifyStack"),

    // Metadata about props expected for PlasmicSocialIcons
    internalVariantProps: PlasmicSocialIcons__VariantProps,
    internalArgProps: PlasmicSocialIcons__ArgProps
  }
);

export default PlasmicSocialIcons;
/* prettier-ignore-end */
