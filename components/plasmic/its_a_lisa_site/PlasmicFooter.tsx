// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tt6TsnGtggzVZCRW2FQ8Vk
// Component: Z-CrKblPINiy

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ContactButton from "../../ContactButton"; // plasmic-import: cAOyLxN62SOb/component

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: 0mo4e2K7LvGd/globalVariant
import { useScreenVariants as useScreenVariantsniKtHGeB1Opg } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: NIKtHGeB1opg/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_its_a_lisa_site.module.css"; // plasmic-import: tt6TsnGtggzVZCRW2FQ8Vk/projectcss
import sty from "./PlasmicFooter.module.css"; // plasmic-import: Z-CrKblPINiy/css

import Icon21Icon from "./icons/PlasmicIcon__Icon21"; // plasmic-import: 7HuHl2O-klQp/icon
import Icon22Icon from "./icons/PlasmicIcon__Icon22"; // plasmic-import: 0R2qJtpePk1T/icon
import Icon23Icon from "./icons/PlasmicIcon__Icon23"; // plasmic-import: 6FuUhrFEU7RO/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: huLMvL5wIXy1/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: FYLMO-tZsz_5/icon

createPlasmicElementProxy;

export type PlasmicFooter__VariantMembers = {};
export type PlasmicFooter__VariantsArgs = {};
type VariantPropType = keyof PlasmicFooter__VariantsArgs;
export const PlasmicFooter__VariantProps = new Array<VariantPropType>();

export type PlasmicFooter__ArgsType = {};
type ArgPropType = keyof PlasmicFooter__ArgsType;
export const PlasmicFooter__ArgProps = new Array<ArgPropType>();

export type PlasmicFooter__OverridesType = {
  footer?: p.Flex<"div">;
  columns?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  h6?: p.Flex<"h6">;
};

export interface DefaultFooterProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFooter__RenderFunc(props: {
  variants: PlasmicFooter__VariantsArgs;
  args: PlasmicFooter__ArgsType;
  overrides: PlasmicFooter__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariantsniKtHGeB1Opg()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"footer"}
      data-plasmic-override={overrides.footer}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.footer,
        {
          [projectcss.global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [sty.footerglobal_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          )
        }
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__d4Gw2)}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"columns"}
          data-plasmic-override={overrides.columns}
          hasGap={true}
          className={classNames(projectcss.all, sty.columns)}
        >
          <div className={classNames(projectcss.all, sty.column___0G9Tn)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___7NnHe)}
            >
              <p.PlasmicImg
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"40px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"40px"}
                src={{
                  src: "/plasmic/its_a_lisa_site/images/image.svg",
                  fullWidth: 150,
                  fullHeight: 150,
                  aspectRatio: 1
                }}
              />

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__rp2Va)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___3KkLx
                  )}
                >
                  {"Connect with me"}
                </div>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__ed5Ay)}
                >
                  <Icon21Icon
                    className={classNames(projectcss.all, sty.svg__wnOfa)}
                    role={"img"}
                  />

                  <Icon22Icon
                    className={classNames(projectcss.all, sty.svg__uelSi)}
                    role={"img"}
                  />

                  <Icon23Icon
                    className={classNames(projectcss.all, sty.svg___0BbDe)}
                    role={"img"}
                  />
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </div>
          <div className={classNames(projectcss.all, sty.column___5QabU)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__d9DIh)}
            >
              <h6
                data-plasmic-name={"h6"}
                data-plasmic-override={overrides.h6}
                className={classNames(
                  projectcss.all,
                  projectcss.h6,
                  projectcss.__wab_text,
                  sty.h6
                )}
              >
                {"ABOUT"}
              </h6>
              <ContactButton
                className={classNames(
                  "__wab_instance",
                  sty.contactButton__i2AHc
                )}
                color={"clear"}
                endIcon={
                  <Icon38Icon
                    className={classNames(projectcss.all, sty.svg___2OSx)}
                    role={"img"}
                  />
                }
                size={"minimal"}
                startIcon={
                  <ChecksvgIcon
                    className={classNames(projectcss.all, sty.svg__lteh4)}
                    role={"img"}
                  />
                }
                submitsForm={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dZnph
                  )}
                >
                  {"Bio"}
                </div>
              </ContactButton>
              <ContactButton
                className={classNames(
                  "__wab_instance",
                  sty.contactButton__ssUql
                )}
                color={"clear"}
                endIcon={
                  <Icon38Icon
                    className={classNames(projectcss.all, sty.svg___0Xkuj)}
                    role={"img"}
                  />
                }
                size={"minimal"}
                startIcon={
                  <ChecksvgIcon
                    className={classNames(projectcss.all, sty.svg__myKcp)}
                    role={"img"}
                  />
                }
                submitsForm={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___91Bat
                  )}
                >
                  {"Resume"}
                </div>
              </ContactButton>
              <ContactButton
                className={classNames(
                  "__wab_instance",
                  sty.contactButton__nLBeg
                )}
                color={"clear"}
                endIcon={
                  <Icon38Icon
                    className={classNames(projectcss.all, sty.svg__r8KD)}
                    role={"img"}
                  />
                }
                size={"minimal"}
                startIcon={
                  <ChecksvgIcon
                    className={classNames(projectcss.all, sty.svg__gcmkg)}
                    role={"img"}
                  />
                }
                submitsForm={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__csUxA
                  )}
                >
                  {"Values"}
                </div>
              </ContactButton>
            </p.Stack>
          </div>
          <div className={classNames(projectcss.all, sty.column__sdAMq)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__gvwDi)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___6KaF7
                )}
              >
                {"PROJECTS"}
              </div>
              <ContactButton
                className={classNames(
                  "__wab_instance",
                  sty.contactButton__cDfkQ
                )}
                color={"clear"}
                endIcon={
                  <Icon38Icon
                    className={classNames(projectcss.all, sty.svg___8NWnx)}
                    role={"img"}
                  />
                }
                size={"minimal"}
                startIcon={
                  <ChecksvgIcon
                    className={classNames(projectcss.all, sty.svg__xPoCo)}
                    role={"img"}
                  />
                }
                submitsForm={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nmlEi
                  )}
                >
                  {"Hobbie"}
                </div>
              </ContactButton>
              <ContactButton
                className={classNames(
                  "__wab_instance",
                  sty.contactButton___21CVa
                )}
                color={"clear"}
                endIcon={
                  <Icon38Icon
                    className={classNames(projectcss.all, sty.svg__o5QF)}
                    role={"img"}
                  />
                }
                size={"minimal"}
                startIcon={
                  <ChecksvgIcon
                    className={classNames(projectcss.all, sty.svg__qEdb2)}
                    role={"img"}
                  />
                }
                submitsForm={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___1DnRe
                  )}
                >
                  {"Professional"}
                </div>
              </ContactButton>
              <ContactButton
                className={classNames(
                  "__wab_instance",
                  sty.contactButton__vMcA
                )}
                color={"clear"}
                endIcon={
                  <Icon38Icon
                    className={classNames(projectcss.all, sty.svg__bObP2)}
                    role={"img"}
                  />
                }
                size={"minimal"}
                startIcon={
                  <ChecksvgIcon
                    className={classNames(projectcss.all, sty.svg__ifpav)}
                    role={"img"}
                  />
                }
                submitsForm={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___26EVm
                  )}
                >
                  {"Academic"}
                </div>
              </ContactButton>
            </p.Stack>
          </div>
          <div className={classNames(projectcss.all, sty.column__rm7Pu)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__kscBj)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wfEc
                )}
              >
                {"RESOURCES"}
              </div>
              <ContactButton
                className={classNames(
                  "__wab_instance",
                  sty.contactButton__aAkSr
                )}
                color={"clear"}
                endIcon={
                  <Icon38Icon
                    className={classNames(projectcss.all, sty.svg__ey7Pk)}
                    role={"img"}
                  />
                }
                size={"minimal"}
                startIcon={
                  <ChecksvgIcon
                    className={classNames(projectcss.all, sty.svg__jE7HR)}
                    role={"img"}
                  />
                }
                submitsForm={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___6OpP4
                  )}
                >
                  {"Women in Tech"}
                </div>
              </ContactButton>
              <ContactButton
                className={classNames(
                  "__wab_instance",
                  sty.contactButton__fyFXe
                )}
                color={"clear"}
                endIcon={
                  <Icon38Icon
                    className={classNames(projectcss.all, sty.svg__d7Imo)}
                    role={"img"}
                  />
                }
                size={"minimal"}
                startIcon={
                  <ChecksvgIcon
                    className={classNames(projectcss.all, sty.svg___5BqLc)}
                    role={"img"}
                  />
                }
                submitsForm={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uSMt8
                  )}
                >
                  {"Neurodiversity"}
                </div>
              </ContactButton>
              <ContactButton
                className={classNames(
                  "__wab_instance",
                  sty.contactButton__yQeFf
                )}
                color={"clear"}
                endIcon={
                  <Icon38Icon
                    className={classNames(projectcss.all, sty.svg___1GPaF)}
                    role={"img"}
                  />
                }
                size={"minimal"}
                startIcon={
                  <ChecksvgIcon
                    className={classNames(projectcss.all, sty.svg__z5Qx)}
                    role={"img"}
                  />
                }
                submitsForm={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___3GzOm
                  )}
                >
                  {"Winning in the Workforce"}
                </div>
              </ContactButton>
              <ContactButton
                className={classNames(
                  "__wab_instance",
                  sty.contactButton__f24Eu
                )}
                color={"clear"}
                endIcon={
                  <Icon38Icon
                    className={classNames(projectcss.all, sty.svg__fsKSu)}
                    role={"img"}
                  />
                }
                size={"minimal"}
                startIcon={
                  <ChecksvgIcon
                    className={classNames(projectcss.all, sty.svg__gy6R7)}
                    role={"img"}
                  />
                }
                submitsForm={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__oZeZd
                  )}
                >
                  {"Cyber Risk Management"}
                </div>
              </ContactButton>
            </p.Stack>
          </div>
        </p.Stack>
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  footer: ["footer", "columns", "img", "h6"],
  columns: ["columns", "img", "h6"],
  img: ["img"],
  h6: ["h6"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  footer: "div";
  columns: "div";
  img: typeof p.PlasmicImg;
  h6: "h6";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooter__VariantsArgs;
    args?: PlasmicFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFooter__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFooter__ArgProps,
          internalVariantPropNames: PlasmicFooter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "footer") {
    func.displayName = "PlasmicFooter";
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("footer"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    img: makeNodeComponent("img"),
    h6: makeNodeComponent("h6"),

    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps
  }
);

export default PlasmicFooter;
/* prettier-ignore-end */
