// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tt6TsnGtggzVZCRW2FQ8Vk
// Component: HBjN2PI6FOY_

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ContactButton from "../../ContactButton"; // plasmic-import: cAOyLxN62SOb/component
import Switch from "../../Switch"; // plasmic-import: 08tV0C4XRgYQ/component

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: 0mo4e2K7LvGd/globalVariant
import { useScreenVariants as useScreenVariantsniKtHGeB1Opg } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: NIKtHGeB1opg/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_its_a_lisa_site.module.css"; // plasmic-import: tt6TsnGtggzVZCRW2FQ8Vk/projectcss
import sty from "./PlasmicHeader.module.css"; // plasmic-import: HBjN2PI6FOY_/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: huLMvL5wIXy1/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: FYLMO-tZsz_5/icon

createPlasmicElementProxy;

export type PlasmicHeader__VariantMembers = {};
export type PlasmicHeader__VariantsArgs = {};
type VariantPropType = keyof PlasmicHeader__VariantsArgs;
export const PlasmicHeader__VariantProps = new Array<VariantPropType>();

export type PlasmicHeader__ArgsType = {};
type ArgPropType = keyof PlasmicHeader__ArgsType;
export const PlasmicHeader__ArgProps = new Array<ArgPropType>();

export type PlasmicHeader__OverridesType = {
  header?: p.Flex<"div">;
  home?: p.Flex<typeof ContactButton>;
  about?: p.Flex<typeof ContactButton>;
  blog?: p.Flex<typeof ContactButton>;
  projects?: p.Flex<typeof ContactButton>;
  resources?: p.Flex<typeof ContactButton>;
  button?: p.Flex<"button">;
  contactButton?: p.Flex<typeof ContactButton>;
  themeSwitch?: p.Flex<typeof Switch>;
};

export interface DefaultHeaderProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHeader__RenderFunc(props: {
  variants: PlasmicHeader__VariantsArgs;
  args: PlasmicHeader__ArgsType;
  overrides: PlasmicHeader__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "themeSwitch.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.setDark;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariantsniKtHGeB1Opg()
  });

  return (
    <div
      data-plasmic-name={"header"}
      data-plasmic-override={overrides.header}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.header,
        {
          [projectcss.global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [sty.headerglobal_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          )
        }
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__mkqy)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__pkbgm)}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__g5Coh)}
          >
            <ContactButton
              data-plasmic-name={"home"}
              data-plasmic-override={overrides.home}
              className={classNames("__wab_instance", sty.home)}
              color={"clear"}
              endIcon={
                <Icon38Icon
                  className={classNames(projectcss.all, sty.svg__tO4Da)}
                  role={"img"}
                />
              }
              startIcon={
                <ChecksvgIcon
                  className={classNames(projectcss.all, sty.svg__maTCf)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lnLeW
                )}
              >
                {"Home"}
              </div>
            </ContactButton>
            <ContactButton
              data-plasmic-name={"about"}
              data-plasmic-override={overrides.about}
              className={classNames("__wab_instance", sty.about)}
              color={"clear"}
              endIcon={
                <Icon38Icon
                  className={classNames(projectcss.all, sty.svg___6Gbg)}
                  role={"img"}
                />
              }
              startIcon={
                <ChecksvgIcon
                  className={classNames(projectcss.all, sty.svg___07Br)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bCd0C
                )}
              >
                {"About"}
              </div>
            </ContactButton>
            <ContactButton
              data-plasmic-name={"blog"}
              data-plasmic-override={overrides.blog}
              className={classNames("__wab_instance", sty.blog)}
              color={"clear"}
              endIcon={
                <Icon38Icon
                  className={classNames(projectcss.all, sty.svg___2DGq)}
                  role={"img"}
                />
              }
              startIcon={
                <ChecksvgIcon
                  className={classNames(projectcss.all, sty.svg__ybCnu)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zrZWq
                )}
              >
                {"Blog"}
              </div>
            </ContactButton>
            <ContactButton
              data-plasmic-name={"projects"}
              data-plasmic-override={overrides.projects}
              className={classNames("__wab_instance", sty.projects)}
              color={"clear"}
              endIcon={
                <Icon38Icon
                  className={classNames(projectcss.all, sty.svg__sxONg)}
                  role={"img"}
                />
              }
              startIcon={
                <ChecksvgIcon
                  className={classNames(projectcss.all, sty.svg__fVOq1)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jumV
                )}
              >
                {"Projects/Research"}
              </div>
            </ContactButton>
            <ContactButton
              data-plasmic-name={"resources"}
              data-plasmic-override={overrides.resources}
              className={classNames("__wab_instance", sty.resources)}
              color={"clear"}
              endIcon={
                <Icon38Icon
                  className={classNames(projectcss.all, sty.svg__utEaX)}
                  role={"img"}
                />
              }
              startIcon={
                <ChecksvgIcon
                  className={classNames(projectcss.all, sty.svg__hF2R)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ve629
                )}
              >
                {"Resources"}
              </div>
            </ContactButton>
          </p.Stack>
          <div className={classNames(projectcss.all, sty.freeBox__genul)}>
            {false ? (
              <button
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames(
                  projectcss.all,
                  projectcss.button,
                  projectcss.__wab_text,
                  sty.button
                )}
              >
                {"Sign up"}
              </button>
            ) : null}
            <ContactButton
              data-plasmic-name={"contactButton"}
              data-plasmic-override={overrides.contactButton}
              className={classNames("__wab_instance", sty.contactButton)}
              color={"clear"}
              endIcon={
                <Icon38Icon
                  className={classNames(projectcss.all, sty.svg__tZjj2)}
                  role={"img"}
                />
              }
              startIcon={
                <ChecksvgIcon
                  className={classNames(projectcss.all, sty.svg__y4NNg)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__x8M3B
                )}
              >
                {"Contact Me"}
              </div>
            </ContactButton>
          </div>
          {(() => {
            const child$Props = {
              className: classNames("__wab_instance", sty.themeSwitch, {
                [sty.themeSwitchglobal_theme_dark]: hasVariant(
                  globalVariants,
                  "theme",
                  "dark"
                )
              }),
              isChecked:
                p.generateStateValueProp($state, [
                  "themeSwitch",
                  "isChecked"
                ]) ?? false,
              onChange: (...eventArgs) => {
                p.generateStateOnChangeProp($state, [
                  "themeSwitch",
                  "isChecked"
                ])(eventArgs[0]);
              }
            };

            p.initializePlasmicStates(
              $state,
              [
                {
                  name: "themeSwitch.isChecked",
                  initFunc: ({ $props, $state, $queries }) =>
                    (() => {
                      try {
                        return $ctx.setDark;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                }
              ],
              []
            );
            return (
              <Switch
                data-plasmic-name={"themeSwitch"}
                data-plasmic-override={overrides.themeSwitch}
                {...child$Props}
              >
                {"Theme"}
              </Switch>
            );
          })()}
        </p.Stack>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  header: [
    "header",
    "home",
    "about",
    "blog",
    "projects",
    "resources",
    "button",
    "contactButton",
    "themeSwitch"
  ],
  home: ["home"],
  about: ["about"],
  blog: ["blog"],
  projects: ["projects"],
  resources: ["resources"],
  button: ["button"],
  contactButton: ["contactButton"],
  themeSwitch: ["themeSwitch"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  header: "div";
  home: typeof ContactButton;
  about: typeof ContactButton;
  blog: typeof ContactButton;
  projects: typeof ContactButton;
  resources: typeof ContactButton;
  button: "button";
  contactButton: typeof ContactButton;
  themeSwitch: typeof Switch;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeader__VariantsArgs;
    args?: PlasmicHeader__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHeader__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHeader__ArgProps,
          internalVariantPropNames: PlasmicHeader__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "header") {
    func.displayName = "PlasmicHeader";
  } else {
    func.displayName = `PlasmicHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicHeader = Object.assign(
  // Top-level PlasmicHeader renders the root element
  makeNodeComponent("header"),
  {
    // Helper components rendering sub-elements
    home: makeNodeComponent("home"),
    about: makeNodeComponent("about"),
    blog: makeNodeComponent("blog"),
    projects: makeNodeComponent("projects"),
    resources: makeNodeComponent("resources"),
    button: makeNodeComponent("button"),
    contactButton: makeNodeComponent("contactButton"),
    themeSwitch: makeNodeComponent("themeSwitch"),

    // Metadata about props expected for PlasmicHeader
    internalVariantProps: PlasmicHeader__VariantProps,
    internalArgProps: PlasmicHeader__ArgProps
  }
);

export default PlasmicHeader;
/* prettier-ignore-end */
