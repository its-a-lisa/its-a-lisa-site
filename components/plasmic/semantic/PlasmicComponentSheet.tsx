// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dNqcW7FYVqnkjtbdVGjyS8
// Component: X-IHl2HTitKv

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { useScreenVariants as useScreenVariantsku6ZmPleDsvH } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: KU6ZMPleDsvH/globalVariant
import { ModeValue, useMode } from "../core/PlasmicGlobalVariant__Mode"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../core/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_core_css from "../core/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import sty from "./PlasmicComponentSheet.module.css"; // plasmic-import: X-IHl2HTitKv/css

createPlasmicElementProxy;

export type PlasmicComponentSheet__VariantMembers = {};
export type PlasmicComponentSheet__VariantsArgs = {};
type VariantPropType = keyof PlasmicComponentSheet__VariantsArgs;
export const PlasmicComponentSheet__VariantProps = new Array<VariantPropType>();

export type PlasmicComponentSheet__ArgsType = {};
type ArgPropType = keyof PlasmicComponentSheet__ArgsType;
export const PlasmicComponentSheet__ArgProps = new Array<ArgPropType>();

export type PlasmicComponentSheet__OverridesType = {
  root?: Flex__<"div">;
  headerSection?: Flex__<"section">;
  pageHeader?: Flex__<"div">;
  designSystemHeaderTitleStack?: Flex__<"div">;
  availabilityStack?: Flex__<"div">;
  noteStack?: Flex__<"div">;
  componentTitleStack?: Flex__<"div">;
  bodySection?: Flex__<"section">;
  bodyTitle?: Flex__<"div">;
  h3?: Flex__<"h3">;
  variantArea?: Flex__<"div">;
  labelStack?: Flex__<"div">;
  componentStack?: Flex__<"div">;
  sizeArea?: Flex__<"div">;
  sizeStack?: Flex__<"div">;
  xxsStack?: Flex__<"div">;
  xxsComponent?: Flex__<"div">;
  xsStack?: Flex__<"div">;
  xsComponent?: Flex__<"div">;
  smStack?: Flex__<"div">;
  smComponent?: Flex__<"div">;
  mdStack?: Flex__<"div">;
  mdComponent?: Flex__<"div">;
  lgStack?: Flex__<"div">;
  lgComponent?: Flex__<"div">;
  xlStack?: Flex__<"div">;
  xlComponent?: Flex__<"div">;
  xxlStack?: Flex__<"div">;
  xxlComponent?: Flex__<"div">;
  stateArea?: Flex__<"div">;
  stateStack?: Flex__<"div">;
  enabledStack?: Flex__<"div">;
  enabledComponent?: Flex__<"div">;
  hoverStack?: Flex__<"div">;
  hoverComponent?: Flex__<"div">;
  activeStack?: Flex__<"div">;
  activeComponent?: Flex__<"div">;
  disabledStack?: Flex__<"div">;
  disabledComponent?: Flex__<"div">;
  footerSection?: Flex__<"section">;
  pageFooter?: Flex__<"div">;
  designSystemFooterTitle?: Flex__<"div">;
};

export interface DefaultComponentSheetProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicComponentSheet__RenderFunc(props: {
  variants: PlasmicComponentSheet__VariantsArgs;
  args: PlasmicComponentSheet__ArgsType;
  overrides: PlasmicComponentSheet__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsku6ZmPleDsvH(),
    mode: useMode(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_core_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_core_css.global_mode_dark]: hasVariant(
            globalVariants,
            "mode",
            "dark"
          )
        }
      )}
    >
      <section
        data-plasmic-name={"headerSection"}
        data-plasmic-override={overrides.headerSection}
        className={classNames(projectcss.all, sty.headerSection)}
      >
        <div
          data-plasmic-name={"pageHeader"}
          data-plasmic-override={overrides.pageHeader}
          className={classNames(projectcss.all, sty.pageHeader)}
        >
          <div
            data-plasmic-name={"designSystemHeaderTitleStack"}
            data-plasmic-override={overrides.designSystemHeaderTitleStack}
            className={classNames(
              projectcss.all,
              sty.designSystemHeaderTitleStack
            )}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__p0CNi
              )}
            >
              {"Seventeen Sierra\nDesign System"}
            </div>
          </div>
          <div
            data-plasmic-name={"availabilityStack"}
            data-plasmic-override={overrides.availabilityStack}
            className={classNames(projectcss.all, sty.availabilityStack)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__d8Ic6
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"Toolkit Status"}
                </span>
                <React.Fragment>{"\nN/A"}</React.Fragment>
              </React.Fragment>
            </div>
          </div>
          <div
            data-plasmic-name={"noteStack"}
            data-plasmic-override={overrides.noteStack}
            className={classNames(projectcss.all, sty.noteStack)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__e2UO2
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"Status Notes:"}
                </span>
                <React.Fragment>{" Design system atom"}</React.Fragment>
              </React.Fragment>
            </div>
          </div>
          <div
            data-plasmic-name={"componentTitleStack"}
            data-plasmic-override={overrides.componentTitleStack}
            className={classNames(projectcss.all, sty.componentTitleStack)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__fbULx
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"Icon"}
                </span>
              </React.Fragment>
            </div>
          </div>
        </div>
      </section>
      <section
        data-plasmic-name={"bodySection"}
        data-plasmic-override={overrides.bodySection}
        className={classNames(projectcss.all, sty.bodySection)}
      >
        <div
          data-plasmic-name={"bodyTitle"}
          data-plasmic-override={overrides.bodyTitle}
          className={classNames(projectcss.all, sty.bodyTitle)}
        >
          <h3
            data-plasmic-name={"h3"}
            data-plasmic-override={overrides.h3}
            className={classNames(
              projectcss.all,
              projectcss.h3,
              projectcss.__wab_text,
              sty.h3
            )}
          >
            {"Icon"}
          </h3>
        </div>
        <Stack__
          as={"div"}
          data-plasmic-name={"variantArea"}
          data-plasmic-override={overrides.variantArea}
          hasGap={true}
          className={classNames(projectcss.all, sty.variantArea)}
        >
          <h6
            className={classNames(
              projectcss.all,
              projectcss.h6,
              projectcss.__wab_text,
              sty.h6___40Af6
            )}
          >
            {"Variant"}
          </h6>
          <Stack__
            as={"div"}
            data-plasmic-name={"labelStack"}
            data-plasmic-override={overrides.labelStack}
            hasGap={true}
            className={classNames(projectcss.all, sty.labelStack)}
          >
            <div
              data-plasmic-name={"componentStack"}
              data-plasmic-override={overrides.componentStack}
              className={classNames(projectcss.all, sty.componentStack)}
            />

            <h6
              className={classNames(
                projectcss.all,
                projectcss.h6,
                projectcss.__wab_text,
                sty.h6___6Hyo7
              )}
            >
              {"Icon"}
            </h6>
          </Stack__>
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"sizeArea"}
          data-plasmic-override={overrides.sizeArea}
          hasGap={true}
          className={classNames(projectcss.all, sty.sizeArea)}
        >
          <h6
            className={classNames(
              projectcss.all,
              projectcss.h6,
              projectcss.__wab_text,
              sty.h6__fvRYm
            )}
          >
            {"Size"}
          </h6>
          <Stack__
            as={"div"}
            data-plasmic-name={"sizeStack"}
            data-plasmic-override={overrides.sizeStack}
            hasGap={true}
            className={classNames(projectcss.all, sty.sizeStack)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"xxsStack"}
              data-plasmic-override={overrides.xxsStack}
              hasGap={true}
              className={classNames(projectcss.all, sty.xxsStack)}
            >
              <div
                data-plasmic-name={"xxsComponent"}
                data-plasmic-override={overrides.xxsComponent}
                className={classNames(projectcss.all, sty.xxsComponent)}
              />

              <h6
                className={classNames(
                  projectcss.all,
                  projectcss.h6,
                  projectcss.__wab_text,
                  sty.h6__rEsIe
                )}
              >
                {"Xxs"}
              </h6>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"xsStack"}
              data-plasmic-override={overrides.xsStack}
              hasGap={true}
              className={classNames(projectcss.all, sty.xsStack)}
            >
              <div
                data-plasmic-name={"xsComponent"}
                data-plasmic-override={overrides.xsComponent}
                className={classNames(projectcss.all, sty.xsComponent)}
              />

              <h6
                className={classNames(
                  projectcss.all,
                  projectcss.h6,
                  projectcss.__wab_text,
                  sty.h6__sYrhZ
                )}
              >
                {"Xs"}
              </h6>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"smStack"}
              data-plasmic-override={overrides.smStack}
              hasGap={true}
              className={classNames(projectcss.all, sty.smStack)}
            >
              <div
                data-plasmic-name={"smComponent"}
                data-plasmic-override={overrides.smComponent}
                className={classNames(projectcss.all, sty.smComponent)}
              />

              <h6
                className={classNames(
                  projectcss.all,
                  projectcss.h6,
                  projectcss.__wab_text,
                  sty.h6__hWvSv
                )}
              >
                {"Sm"}
              </h6>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"mdStack"}
              data-plasmic-override={overrides.mdStack}
              hasGap={true}
              className={classNames(projectcss.all, sty.mdStack)}
            >
              <div
                data-plasmic-name={"mdComponent"}
                data-plasmic-override={overrides.mdComponent}
                className={classNames(projectcss.all, sty.mdComponent)}
              />

              <h6
                className={classNames(
                  projectcss.all,
                  projectcss.h6,
                  projectcss.__wab_text,
                  sty.h6__t5Xqw
                )}
              >
                {"Md"}
              </h6>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"lgStack"}
              data-plasmic-override={overrides.lgStack}
              hasGap={true}
              className={classNames(projectcss.all, sty.lgStack)}
            >
              <div
                data-plasmic-name={"lgComponent"}
                data-plasmic-override={overrides.lgComponent}
                className={classNames(projectcss.all, sty.lgComponent)}
              />

              <h6
                className={classNames(
                  projectcss.all,
                  projectcss.h6,
                  projectcss.__wab_text,
                  sty.h6__qxsgC
                )}
              >
                {"Lg"}
              </h6>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"xlStack"}
              data-plasmic-override={overrides.xlStack}
              hasGap={true}
              className={classNames(projectcss.all, sty.xlStack)}
            >
              <div
                data-plasmic-name={"xlComponent"}
                data-plasmic-override={overrides.xlComponent}
                className={classNames(projectcss.all, sty.xlComponent)}
              />

              <h6
                className={classNames(
                  projectcss.all,
                  projectcss.h6,
                  projectcss.__wab_text,
                  sty.h6__xsIaI
                )}
              >
                {"Xl"}
              </h6>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"xxlStack"}
              data-plasmic-override={overrides.xxlStack}
              hasGap={true}
              className={classNames(projectcss.all, sty.xxlStack)}
            >
              <div
                data-plasmic-name={"xxlComponent"}
                data-plasmic-override={overrides.xxlComponent}
                className={classNames(projectcss.all, sty.xxlComponent)}
              />

              <h6
                className={classNames(
                  projectcss.all,
                  projectcss.h6,
                  projectcss.__wab_text,
                  sty.h6__oAwwq
                )}
              >
                {"Xxl"}
              </h6>
            </Stack__>
          </Stack__>
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"stateArea"}
          data-plasmic-override={overrides.stateArea}
          hasGap={true}
          className={classNames(projectcss.all, sty.stateArea)}
        >
          <h6
            className={classNames(
              projectcss.all,
              projectcss.h6,
              projectcss.__wab_text,
              sty.h6__uleTt
            )}
          >
            {"State"}
          </h6>
          <Stack__
            as={"div"}
            data-plasmic-name={"stateStack"}
            data-plasmic-override={overrides.stateStack}
            hasGap={true}
            className={classNames(projectcss.all, sty.stateStack)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"enabledStack"}
              data-plasmic-override={overrides.enabledStack}
              hasGap={true}
              className={classNames(projectcss.all, sty.enabledStack)}
            >
              <div
                data-plasmic-name={"enabledComponent"}
                data-plasmic-override={overrides.enabledComponent}
                className={classNames(projectcss.all, sty.enabledComponent)}
              />

              <h6
                className={classNames(
                  projectcss.all,
                  projectcss.h6,
                  projectcss.__wab_text,
                  sty.h6___5NB52
                )}
              >
                {"Enabled"}
              </h6>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"hoverStack"}
              data-plasmic-override={overrides.hoverStack}
              hasGap={true}
              className={classNames(projectcss.all, sty.hoverStack)}
            >
              <div
                data-plasmic-name={"hoverComponent"}
                data-plasmic-override={overrides.hoverComponent}
                className={classNames(projectcss.all, sty.hoverComponent)}
              />

              <h6
                className={classNames(
                  projectcss.all,
                  projectcss.h6,
                  projectcss.__wab_text,
                  sty.h6__vnky7
                )}
              >
                {"Hover"}
              </h6>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"activeStack"}
              data-plasmic-override={overrides.activeStack}
              hasGap={true}
              className={classNames(projectcss.all, sty.activeStack)}
            >
              <div
                data-plasmic-name={"activeComponent"}
                data-plasmic-override={overrides.activeComponent}
                className={classNames(projectcss.all, sty.activeComponent)}
              />

              <h6
                className={classNames(
                  projectcss.all,
                  projectcss.h6,
                  projectcss.__wab_text,
                  sty.h6__iBco5
                )}
              >
                {"Active"}
              </h6>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"disabledStack"}
              data-plasmic-override={overrides.disabledStack}
              hasGap={true}
              className={classNames(projectcss.all, sty.disabledStack)}
            >
              <div
                data-plasmic-name={"disabledComponent"}
                data-plasmic-override={overrides.disabledComponent}
                className={classNames(projectcss.all, sty.disabledComponent)}
              />

              <h6
                className={classNames(
                  projectcss.all,
                  projectcss.h6,
                  projectcss.__wab_text,
                  sty.h6__tS22P
                )}
              >
                {"Disabled"}
              </h6>
            </Stack__>
          </Stack__>
        </Stack__>
      </section>
      <section
        data-plasmic-name={"footerSection"}
        data-plasmic-override={overrides.footerSection}
        className={classNames(projectcss.all, sty.footerSection)}
      >
        <div
          data-plasmic-name={"pageFooter"}
          data-plasmic-override={overrides.pageFooter}
          className={classNames(projectcss.all, sty.pageFooter)}
        >
          <div
            data-plasmic-name={"designSystemFooterTitle"}
            data-plasmic-override={overrides.designSystemFooterTitle}
            className={classNames(projectcss.all, sty.designSystemFooterTitle)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__cCwB
              )}
            >
              {"Seventeen Sierra\nDesign System"}
            </div>
          </div>
        </div>
      </section>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerSection",
    "pageHeader",
    "designSystemHeaderTitleStack",
    "availabilityStack",
    "noteStack",
    "componentTitleStack",
    "bodySection",
    "bodyTitle",
    "h3",
    "variantArea",
    "labelStack",
    "componentStack",
    "sizeArea",
    "sizeStack",
    "xxsStack",
    "xxsComponent",
    "xsStack",
    "xsComponent",
    "smStack",
    "smComponent",
    "mdStack",
    "mdComponent",
    "lgStack",
    "lgComponent",
    "xlStack",
    "xlComponent",
    "xxlStack",
    "xxlComponent",
    "stateArea",
    "stateStack",
    "enabledStack",
    "enabledComponent",
    "hoverStack",
    "hoverComponent",
    "activeStack",
    "activeComponent",
    "disabledStack",
    "disabledComponent",
    "footerSection",
    "pageFooter",
    "designSystemFooterTitle"
  ],
  headerSection: [
    "headerSection",
    "pageHeader",
    "designSystemHeaderTitleStack",
    "availabilityStack",
    "noteStack",
    "componentTitleStack"
  ],
  pageHeader: [
    "pageHeader",
    "designSystemHeaderTitleStack",
    "availabilityStack",
    "noteStack",
    "componentTitleStack"
  ],
  designSystemHeaderTitleStack: ["designSystemHeaderTitleStack"],
  availabilityStack: ["availabilityStack"],
  noteStack: ["noteStack"],
  componentTitleStack: ["componentTitleStack"],
  bodySection: [
    "bodySection",
    "bodyTitle",
    "h3",
    "variantArea",
    "labelStack",
    "componentStack",
    "sizeArea",
    "sizeStack",
    "xxsStack",
    "xxsComponent",
    "xsStack",
    "xsComponent",
    "smStack",
    "smComponent",
    "mdStack",
    "mdComponent",
    "lgStack",
    "lgComponent",
    "xlStack",
    "xlComponent",
    "xxlStack",
    "xxlComponent",
    "stateArea",
    "stateStack",
    "enabledStack",
    "enabledComponent",
    "hoverStack",
    "hoverComponent",
    "activeStack",
    "activeComponent",
    "disabledStack",
    "disabledComponent"
  ],
  bodyTitle: ["bodyTitle", "h3"],
  h3: ["h3"],
  variantArea: ["variantArea", "labelStack", "componentStack"],
  labelStack: ["labelStack", "componentStack"],
  componentStack: ["componentStack"],
  sizeArea: [
    "sizeArea",
    "sizeStack",
    "xxsStack",
    "xxsComponent",
    "xsStack",
    "xsComponent",
    "smStack",
    "smComponent",
    "mdStack",
    "mdComponent",
    "lgStack",
    "lgComponent",
    "xlStack",
    "xlComponent",
    "xxlStack",
    "xxlComponent"
  ],
  sizeStack: [
    "sizeStack",
    "xxsStack",
    "xxsComponent",
    "xsStack",
    "xsComponent",
    "smStack",
    "smComponent",
    "mdStack",
    "mdComponent",
    "lgStack",
    "lgComponent",
    "xlStack",
    "xlComponent",
    "xxlStack",
    "xxlComponent"
  ],
  xxsStack: ["xxsStack", "xxsComponent"],
  xxsComponent: ["xxsComponent"],
  xsStack: ["xsStack", "xsComponent"],
  xsComponent: ["xsComponent"],
  smStack: ["smStack", "smComponent"],
  smComponent: ["smComponent"],
  mdStack: ["mdStack", "mdComponent"],
  mdComponent: ["mdComponent"],
  lgStack: ["lgStack", "lgComponent"],
  lgComponent: ["lgComponent"],
  xlStack: ["xlStack", "xlComponent"],
  xlComponent: ["xlComponent"],
  xxlStack: ["xxlStack", "xxlComponent"],
  xxlComponent: ["xxlComponent"],
  stateArea: [
    "stateArea",
    "stateStack",
    "enabledStack",
    "enabledComponent",
    "hoverStack",
    "hoverComponent",
    "activeStack",
    "activeComponent",
    "disabledStack",
    "disabledComponent"
  ],
  stateStack: [
    "stateStack",
    "enabledStack",
    "enabledComponent",
    "hoverStack",
    "hoverComponent",
    "activeStack",
    "activeComponent",
    "disabledStack",
    "disabledComponent"
  ],
  enabledStack: ["enabledStack", "enabledComponent"],
  enabledComponent: ["enabledComponent"],
  hoverStack: ["hoverStack", "hoverComponent"],
  hoverComponent: ["hoverComponent"],
  activeStack: ["activeStack", "activeComponent"],
  activeComponent: ["activeComponent"],
  disabledStack: ["disabledStack", "disabledComponent"],
  disabledComponent: ["disabledComponent"],
  footerSection: ["footerSection", "pageFooter", "designSystemFooterTitle"],
  pageFooter: ["pageFooter", "designSystemFooterTitle"],
  designSystemFooterTitle: ["designSystemFooterTitle"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerSection: "section";
  pageHeader: "div";
  designSystemHeaderTitleStack: "div";
  availabilityStack: "div";
  noteStack: "div";
  componentTitleStack: "div";
  bodySection: "section";
  bodyTitle: "div";
  h3: "h3";
  variantArea: "div";
  labelStack: "div";
  componentStack: "div";
  sizeArea: "div";
  sizeStack: "div";
  xxsStack: "div";
  xxsComponent: "div";
  xsStack: "div";
  xsComponent: "div";
  smStack: "div";
  smComponent: "div";
  mdStack: "div";
  mdComponent: "div";
  lgStack: "div";
  lgComponent: "div";
  xlStack: "div";
  xlComponent: "div";
  xxlStack: "div";
  xxlComponent: "div";
  stateArea: "div";
  stateStack: "div";
  enabledStack: "div";
  enabledComponent: "div";
  hoverStack: "div";
  hoverComponent: "div";
  activeStack: "div";
  activeComponent: "div";
  disabledStack: "div";
  disabledComponent: "div";
  footerSection: "section";
  pageFooter: "div";
  designSystemFooterTitle: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicComponentSheet__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicComponentSheet__VariantsArgs;
    args?: PlasmicComponentSheet__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicComponentSheet__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicComponentSheet__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicComponentSheet__ArgProps,
          internalVariantPropNames: PlasmicComponentSheet__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicComponentSheet__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicComponentSheet";
  } else {
    func.displayName = `PlasmicComponentSheet.${nodeName}`;
  }
  return func;
}

export const PlasmicComponentSheet = Object.assign(
  // Top-level PlasmicComponentSheet renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerSection: makeNodeComponent("headerSection"),
    pageHeader: makeNodeComponent("pageHeader"),
    designSystemHeaderTitleStack: makeNodeComponent(
      "designSystemHeaderTitleStack"
    ),
    availabilityStack: makeNodeComponent("availabilityStack"),
    noteStack: makeNodeComponent("noteStack"),
    componentTitleStack: makeNodeComponent("componentTitleStack"),
    bodySection: makeNodeComponent("bodySection"),
    bodyTitle: makeNodeComponent("bodyTitle"),
    h3: makeNodeComponent("h3"),
    variantArea: makeNodeComponent("variantArea"),
    labelStack: makeNodeComponent("labelStack"),
    componentStack: makeNodeComponent("componentStack"),
    sizeArea: makeNodeComponent("sizeArea"),
    sizeStack: makeNodeComponent("sizeStack"),
    xxsStack: makeNodeComponent("xxsStack"),
    xxsComponent: makeNodeComponent("xxsComponent"),
    xsStack: makeNodeComponent("xsStack"),
    xsComponent: makeNodeComponent("xsComponent"),
    smStack: makeNodeComponent("smStack"),
    smComponent: makeNodeComponent("smComponent"),
    mdStack: makeNodeComponent("mdStack"),
    mdComponent: makeNodeComponent("mdComponent"),
    lgStack: makeNodeComponent("lgStack"),
    lgComponent: makeNodeComponent("lgComponent"),
    xlStack: makeNodeComponent("xlStack"),
    xlComponent: makeNodeComponent("xlComponent"),
    xxlStack: makeNodeComponent("xxlStack"),
    xxlComponent: makeNodeComponent("xxlComponent"),
    stateArea: makeNodeComponent("stateArea"),
    stateStack: makeNodeComponent("stateStack"),
    enabledStack: makeNodeComponent("enabledStack"),
    enabledComponent: makeNodeComponent("enabledComponent"),
    hoverStack: makeNodeComponent("hoverStack"),
    hoverComponent: makeNodeComponent("hoverComponent"),
    activeStack: makeNodeComponent("activeStack"),
    activeComponent: makeNodeComponent("activeComponent"),
    disabledStack: makeNodeComponent("disabledStack"),
    disabledComponent: makeNodeComponent("disabledComponent"),
    footerSection: makeNodeComponent("footerSection"),
    pageFooter: makeNodeComponent("pageFooter"),
    designSystemFooterTitle: makeNodeComponent("designSystemFooterTitle"),

    // Metadata about props expected for PlasmicComponentSheet
    internalVariantProps: PlasmicComponentSheet__VariantProps,
    internalArgProps: PlasmicComponentSheet__ArgProps
  }
);

export default PlasmicComponentSheet;
/* prettier-ignore-end */
