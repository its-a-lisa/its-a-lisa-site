// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mGt6E9beS9xM1LmsApto9L
// Component: iWSZkUWMNfpu

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ModeValue, useMode } from "../core/PlasmicGlobalVariant__Mode"; // plasmic-import: yBTVTgAz2Co9/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_core_css from "../core/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_semantic_css from "../semantic/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: mGt6E9beS9xM1LmsApto9L/projectcss
import sty from "./PlasmicSeparator.module.css"; // plasmic-import: iWSZkUWMNfpu/css

createPlasmicElementProxy;

export type PlasmicSeparator__VariantMembers = {
  orientationShift: "orientationShift";
  length: "full" | "_75" | "_50" | "_25";
  emphasis: "minimal" | "subtle" | "moderate" | "bold" | "contrast";
};
export type PlasmicSeparator__VariantsArgs = {
  orientationShift?: SingleBooleanChoiceArg<"orientationShift">;
  length?: SingleChoiceArg<"full" | "_75" | "_50" | "_25">;
  emphasis?: SingleChoiceArg<
    "minimal" | "subtle" | "moderate" | "bold" | "contrast"
  >;
};
type VariantPropType = keyof PlasmicSeparator__VariantsArgs;
export const PlasmicSeparator__VariantProps = new Array<VariantPropType>(
  "orientationShift",
  "length",
  "emphasis"
);

export type PlasmicSeparator__ArgsType = {};
type ArgPropType = keyof PlasmicSeparator__ArgsType;
export const PlasmicSeparator__ArgProps = new Array<ArgPropType>();

export type PlasmicSeparator__OverridesType = {
  root?: Flex__<"div">;
};

export interface DefaultSeparatorProps {
  orientationShift?: SingleBooleanChoiceArg<"orientationShift">;
  length?: SingleChoiceArg<"full" | "_75" | "_50" | "_25">;
  emphasis?: SingleChoiceArg<
    "minimal" | "subtle" | "moderate" | "bold" | "contrast"
  >;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSeparator__RenderFunc(props: {
  variants: PlasmicSeparator__VariantsArgs;
  args: PlasmicSeparator__ArgsType;
  overrides: PlasmicSeparator__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "orientationShift",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.orientationShift
      },
      {
        path: "length",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.length
      },
      {
        path: "emphasis",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.emphasis
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    mode: useMode()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_core_css.plasmic_tokens,
        plasmic_semantic_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_core_css.global_mode_dark]: hasVariant(
            globalVariants,
            "mode",
            "dark"
          ),
          [sty.rootorientationShift]: hasVariant(
            $state,
            "orientationShift",
            "orientationShift"
          )
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__jPhmU, {
          [sty.freeBoxorientationShift__jPhmUwDpK]: hasVariant(
            $state,
            "orientationShift",
            "orientationShift"
          )
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox___5W5Ms, {
            [sty.freeBoxemphasis_bold___5W5MsjtyFs]: hasVariant(
              $state,
              "emphasis",
              "bold"
            ),
            [sty.freeBoxemphasis_contrast___5W5MsjxX5K]: hasVariant(
              $state,
              "emphasis",
              "contrast"
            ),
            [sty.freeBoxemphasis_minimal___5W5Ms28YcF]: hasVariant(
              $state,
              "emphasis",
              "minimal"
            ),
            [sty.freeBoxemphasis_moderate___5W5MsXe4Iq]: hasVariant(
              $state,
              "emphasis",
              "moderate"
            ),
            [sty.freeBoxemphasis_subtle___5W5MsIuXob]: hasVariant(
              $state,
              "emphasis",
              "subtle"
            ),
            [sty.freeBoxlength__25___5W5Mszii7]: hasVariant(
              $state,
              "length",
              "_25"
            ),
            [sty.freeBoxlength__50___5W5MsYa1Gv]: hasVariant(
              $state,
              "length",
              "_50"
            ),
            [sty.freeBoxlength__75___5W5MsN4Wxj]: hasVariant(
              $state,
              "length",
              "_75"
            ),
            [sty.freeBoxorientationShift___5W5MsWDpK]: hasVariant(
              $state,
              "orientationShift",
              "orientationShift"
            )
          })}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSeparator__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSeparator__VariantsArgs;
    args?: PlasmicSeparator__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSeparator__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSeparator__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSeparator__ArgProps,
          internalVariantPropNames: PlasmicSeparator__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSeparator__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSeparator";
  } else {
    func.displayName = `PlasmicSeparator.${nodeName}`;
  }
  return func;
}

export const PlasmicSeparator = Object.assign(
  // Top-level PlasmicSeparator renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicSeparator
    internalVariantProps: PlasmicSeparator__VariantProps,
    internalArgProps: PlasmicSeparator__ArgProps
  }
);

export default PlasmicSeparator;
/* prettier-ignore-end */
