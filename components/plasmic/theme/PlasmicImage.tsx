// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6eqm1KNiFrAWEs21Xh4t1D
// Component: vnrH5pvyz580

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_core_css from "../core/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_switch_css from "../switch/plasmic.module.css"; // plasmic-import: i4n9AbVD4xq7VvHzvrVDh9/projectcss
import plasmic_badge_css from "../badge/plasmic.module.css"; // plasmic-import: 6PoNur73nfoJqbzNtkNpAX/projectcss
import plasmic_avatar_css from "../avatar/plasmic.module.css"; // plasmic-import: wjwfXMtbnYisAPU4bK5cC5/projectcss
import plasmic_button_css from "../button/plasmic.module.css"; // plasmic-import: 4JFyEcvXaxQ6TZ3SJQYzp6/projectcss
import plasmic_input_css from "../input/plasmic.module.css"; // plasmic-import: teUZ7d8BEHskoXuvEf1pBj/projectcss
import plasmic_semantic_css from "../semantic/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import plasmic_icon_css from "../icon/plasmic.module.css"; // plasmic-import: nVTL6BvP7Knk1RSNkBbJCm/projectcss
import plasmic_menu_item_css from "../menu_item/plasmic.module.css"; // plasmic-import: 2ejMdvJDoJWjwd6DCNSCHJ/projectcss
import plasmic_image_css from "../image/plasmic.module.css"; // plasmic-import: d4FLWyib3U2TEbmJ38D5i3/projectcss
import plasmic_typography_css from "../typography/plasmic.module.css"; // plasmic-import: rs6Egi3bpxgrd3P2FjjZpt/projectcss
import plasmic_content_css from "../content/plasmic.module.css"; // plasmic-import: xpyP1X2yhd8ZY24SVBFr1E/projectcss
import plasmic_headline_css from "../headline/plasmic.module.css"; // plasmic-import: gXd6w7L89NWPNeJmpaYS3W/projectcss
import plasmic_sub_headline_css from "../sub_headline/plasmic.module.css"; // plasmic-import: 55QiaDppxCP7g9b2J75qMu/projectcss
import plasmic_kicker_css from "../kicker/plasmic.module.css"; // plasmic-import: fBeERBQAnyanAaLZ4nhRvg/projectcss
import plasmic_label_css from "../label/plasmic.module.css"; // plasmic-import: hNcAxYG8R1eSmuzeUeAQYf/projectcss
import plasmic_link_css from "../link/plasmic.module.css"; // plasmic-import: 9cLG8PgSvqkoRbLtirXmUr/projectcss
import plasmic_list_item_css from "../list_item/plasmic.module.css"; // plasmic-import: fKizj5juSSuZK31zh3BBJE/projectcss
import plasmic_list_group_css from "../list_group/plasmic.module.css"; // plasmic-import: vdyuckzTfD3wQ2e6DnsVHo/projectcss
import plasmic_card_css from "../card/plasmic.module.css"; // plasmic-import: sZLRCyi9YYe7t6BG9GcNjp/projectcss
import plasmic_title_css from "../title/plasmic.module.css"; // plasmic-import: 77r5g6Swry3x5EDhnHGHyj/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 6eqm1KNiFrAWEs21Xh4t1D/projectcss
import sty from "./PlasmicImage.module.css"; // plasmic-import: vnrH5pvyz580/css

createPlasmicElementProxy;

export type PlasmicImage__VariantMembers = {
  aspectRatio: "_11" | "_43" | "_32" | "_169" | "_21" | "_31" | "_41";
  altAspectRatio: "_11" | "_43" | "_32" | "_169" | "_21" | "_31" | "_41";
};
export type PlasmicImage__VariantsArgs = {
  aspectRatio?: SingleChoiceArg<
    "_11" | "_43" | "_32" | "_169" | "_21" | "_31" | "_41"
  >;
  altAspectRatio?: SingleChoiceArg<
    "_11" | "_43" | "_32" | "_169" | "_21" | "_31" | "_41"
  >;
};
type VariantPropType = keyof PlasmicImage__VariantsArgs;
export const PlasmicImage__VariantProps = new Array<VariantPropType>(
  "aspectRatio",
  "altAspectRatio"
);

export type PlasmicImage__ArgsType = {
  imageSlot?: React.ReactNode;
};
type ArgPropType = keyof PlasmicImage__ArgsType;
export const PlasmicImage__ArgProps = new Array<ArgPropType>("imageSlot");

export type PlasmicImage__OverridesType = {
  imageBase?: Flex__<"div">;
  imageStack?: Flex__<"div">;
};

export interface DefaultImageProps {
  imageSlot?: React.ReactNode;
  aspectRatio?: SingleChoiceArg<
    "_11" | "_43" | "_32" | "_169" | "_21" | "_31" | "_41"
  >;
  altAspectRatio?: SingleChoiceArg<
    "_11" | "_43" | "_32" | "_169" | "_21" | "_31" | "_41"
  >;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicImage__RenderFunc(props: {
  variants: PlasmicImage__VariantsArgs;
  args: PlasmicImage__ArgsType;
  overrides: PlasmicImage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "aspectRatio",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.aspectRatio
      },
      {
        path: "altAspectRatio",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.altAspectRatio
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"imageBase"}
      data-plasmic-override={overrides.imageBase}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_core_css.plasmic_tokens,
        plasmic_switch_css.plasmic_tokens,
        plasmic_badge_css.plasmic_tokens,
        plasmic_avatar_css.plasmic_tokens,
        plasmic_button_css.plasmic_tokens,
        plasmic_input_css.plasmic_tokens,
        plasmic_semantic_css.plasmic_tokens,
        plasmic_icon_css.plasmic_tokens,
        plasmic_menu_item_css.plasmic_tokens,
        plasmic_image_css.plasmic_tokens,
        plasmic_typography_css.plasmic_tokens,
        plasmic_content_css.plasmic_tokens,
        plasmic_headline_css.plasmic_tokens,
        plasmic_sub_headline_css.plasmic_tokens,
        plasmic_kicker_css.plasmic_tokens,
        plasmic_label_css.plasmic_tokens,
        plasmic_link_css.plasmic_tokens,
        plasmic_list_item_css.plasmic_tokens,
        plasmic_list_group_css.plasmic_tokens,
        plasmic_card_css.plasmic_tokens,
        plasmic_title_css.plasmic_tokens,
        sty.imageBase,
        {
          [sty.imageBasealtAspectRatio__11]: hasVariant(
            $state,
            "altAspectRatio",
            "_11"
          ),
          [sty.imageBasealtAspectRatio__169]: hasVariant(
            $state,
            "altAspectRatio",
            "_169"
          ),
          [sty.imageBasealtAspectRatio__21]: hasVariant(
            $state,
            "altAspectRatio",
            "_21"
          ),
          [sty.imageBasealtAspectRatio__31]: hasVariant(
            $state,
            "altAspectRatio",
            "_31"
          ),
          [sty.imageBasealtAspectRatio__32]: hasVariant(
            $state,
            "altAspectRatio",
            "_32"
          ),
          [sty.imageBasealtAspectRatio__41]: hasVariant(
            $state,
            "altAspectRatio",
            "_41"
          ),
          [sty.imageBasealtAspectRatio__43]: hasVariant(
            $state,
            "altAspectRatio",
            "_43"
          ),
          [sty.imageBaseaspectRatio__11]: hasVariant(
            $state,
            "aspectRatio",
            "_11"
          ),
          [sty.imageBaseaspectRatio__169]: hasVariant(
            $state,
            "aspectRatio",
            "_169"
          ),
          [sty.imageBaseaspectRatio__21]: hasVariant(
            $state,
            "aspectRatio",
            "_21"
          ),
          [sty.imageBaseaspectRatio__31]: hasVariant(
            $state,
            "aspectRatio",
            "_31"
          ),
          [sty.imageBaseaspectRatio__32]: hasVariant(
            $state,
            "aspectRatio",
            "_32"
          ),
          [sty.imageBaseaspectRatio__41]: hasVariant(
            $state,
            "aspectRatio",
            "_41"
          ),
          [sty.imageBaseaspectRatio__43]: hasVariant(
            $state,
            "aspectRatio",
            "_43"
          )
        }
      )}
    >
      <div
        data-plasmic-name={"imageStack"}
        data-plasmic-override={overrides.imageStack}
        className={classNames(projectcss.all, sty.imageStack, {
          [sty.imageStackaspectRatio__11]: hasVariant(
            $state,
            "aspectRatio",
            "_11"
          )
        })}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__mkxO0)}
              displayHeight={"100%"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
            />
          ),

          value: args.imageSlot
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  imageBase: ["imageBase", "imageStack"],
  imageStack: ["imageStack"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  imageBase: "div";
  imageStack: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicImage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicImage__VariantsArgs;
    args?: PlasmicImage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicImage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicImage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicImage__ArgProps,
          internalVariantPropNames: PlasmicImage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicImage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "imageBase") {
    func.displayName = "PlasmicImage";
  } else {
    func.displayName = `PlasmicImage.${nodeName}`;
  }
  return func;
}

export const PlasmicImage = Object.assign(
  // Top-level PlasmicImage renders the root element
  makeNodeComponent("imageBase"),
  {
    // Helper components rendering sub-elements
    imageStack: makeNodeComponent("imageStack"),

    // Metadata about props expected for PlasmicImage
    internalVariantProps: PlasmicImage__VariantProps,
    internalArgProps: PlasmicImage__ArgProps
  }
);

export default PlasmicImage;
/* prettier-ignore-end */
