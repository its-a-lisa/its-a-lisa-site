// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6eqm1KNiFrAWEs21Xh4t1D
// Component: yjdXmICcTtAM

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ModeValue, useMode } from "../core/PlasmicGlobalVariant__Mode"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../core/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_core_css from "../core/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_switch_css from "../switch/plasmic.module.css"; // plasmic-import: i4n9AbVD4xq7VvHzvrVDh9/projectcss
import plasmic_badge_css from "../badge/plasmic.module.css"; // plasmic-import: 6PoNur73nfoJqbzNtkNpAX/projectcss
import plasmic_avatar_css from "../avatar/plasmic.module.css"; // plasmic-import: wjwfXMtbnYisAPU4bK5cC5/projectcss
import plasmic_button_css from "../button/plasmic.module.css"; // plasmic-import: 4JFyEcvXaxQ6TZ3SJQYzp6/projectcss
import plasmic_input_css from "../input/plasmic.module.css"; // plasmic-import: teUZ7d8BEHskoXuvEf1pBj/projectcss
import plasmic_semantic_css from "../semantic/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import plasmic_icon_css from "../icon/plasmic.module.css"; // plasmic-import: nVTL6BvP7Knk1RSNkBbJCm/projectcss
import plasmic_menu_item_css from "../menu_item/plasmic.module.css"; // plasmic-import: 2ejMdvJDoJWjwd6DCNSCHJ/projectcss
import plasmic_image_css from "../image/plasmic.module.css"; // plasmic-import: d4FLWyib3U2TEbmJ38D5i3/projectcss
import plasmic_typography_css from "../typography/plasmic.module.css"; // plasmic-import: rs6Egi3bpxgrd3P2FjjZpt/projectcss
import plasmic_content_css from "../content/plasmic.module.css"; // plasmic-import: xpyP1X2yhd8ZY24SVBFr1E/projectcss
import plasmic_headline_css from "../headline/plasmic.module.css"; // plasmic-import: gXd6w7L89NWPNeJmpaYS3W/projectcss
import plasmic_sub_headline_css from "../sub_headline/plasmic.module.css"; // plasmic-import: 55QiaDppxCP7g9b2J75qMu/projectcss
import plasmic_kicker_css from "../kicker/plasmic.module.css"; // plasmic-import: fBeERBQAnyanAaLZ4nhRvg/projectcss
import plasmic_label_css from "../label/plasmic.module.css"; // plasmic-import: hNcAxYG8R1eSmuzeUeAQYf/projectcss
import plasmic_link_css from "../link/plasmic.module.css"; // plasmic-import: 9cLG8PgSvqkoRbLtirXmUr/projectcss
import plasmic_list_item_css from "../list_item/plasmic.module.css"; // plasmic-import: fKizj5juSSuZK31zh3BBJE/projectcss
import plasmic_list_group_css from "../list_group/plasmic.module.css"; // plasmic-import: vdyuckzTfD3wQ2e6DnsVHo/projectcss
import plasmic_card_css from "../card/plasmic.module.css"; // plasmic-import: sZLRCyi9YYe7t6BG9GcNjp/projectcss
import plasmic_title_css from "../title/plasmic.module.css"; // plasmic-import: 77r5g6Swry3x5EDhnHGHyj/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 6eqm1KNiFrAWEs21Xh4t1D/projectcss
import sty from "./PlasmicListItem.module.css"; // plasmic-import: yjdXmICcTtAM/css

import FaBarssvgIcon from "../icon/icons/PlasmicIcon__FaBarssvg"; // plasmic-import: 2biN1-VrlTlm/icon

createPlasmicElementProxy;

export type PlasmicListItem__VariantMembers = {
  contentColor:
    | "emphasis"
    | "standard"
    | "primary"
    | "secondary"
    | "success"
    | "information"
    | "error"
    | "disabled"
    | "helper"
    | "onColor";
  iconColor:
    | "secondary"
    | "standard"
    | "primary"
    | "success"
    | "information"
    | "error"
    | "disabled"
    | "onColor";
  family: "_default" | "secondary";
  lineHeight: "_default" | "compact";
  size: "sm" | "md" | "lg";
  weight: "normal" | "light" | "medium";
  align: "left" | "center" | "right" | "justified";
  reverseItemComponents: "reverseItemComponents";
};
export type PlasmicListItem__VariantsArgs = {
  contentColor?: SingleChoiceArg<
    | "emphasis"
    | "standard"
    | "primary"
    | "secondary"
    | "success"
    | "information"
    | "error"
    | "disabled"
    | "helper"
    | "onColor"
  >;
  iconColor?: SingleChoiceArg<
    | "secondary"
    | "standard"
    | "primary"
    | "success"
    | "information"
    | "error"
    | "disabled"
    | "onColor"
  >;
  family?: SingleChoiceArg<"_default" | "secondary">;
  lineHeight?: SingleChoiceArg<"_default" | "compact">;
  size?: SingleChoiceArg<"sm" | "md" | "lg">;
  weight?: SingleChoiceArg<"normal" | "light" | "medium">;
  align?: SingleChoiceArg<"left" | "center" | "right" | "justified">;
  reverseItemComponents?: SingleBooleanChoiceArg<"reverseItemComponents">;
};
type VariantPropType = keyof PlasmicListItem__VariantsArgs;
export const PlasmicListItem__VariantProps = new Array<VariantPropType>(
  "contentColor",
  "iconColor",
  "family",
  "lineHeight",
  "size",
  "weight",
  "align",
  "reverseItemComponents"
);

export type PlasmicListItem__ArgsType = {
  listContentSlot?: React.ReactNode;
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicListItem__ArgsType;
export const PlasmicListItem__ArgProps = new Array<ArgPropType>(
  "listContentSlot",
  "children"
);

export type PlasmicListItem__OverridesType = {
  listItemBase?: Flex__<"div">;
  listItemStack?: Flex__<"div">;
  listItemIconStack?: Flex__<"div">;
  listItemContentStack?: Flex__<"div">;
};

export interface DefaultListItemProps {
  listContentSlot?: React.ReactNode;
  children?: React.ReactNode;
  contentColor?: SingleChoiceArg<
    | "emphasis"
    | "standard"
    | "primary"
    | "secondary"
    | "success"
    | "information"
    | "error"
    | "disabled"
    | "helper"
    | "onColor"
  >;
  iconColor?: SingleChoiceArg<
    | "secondary"
    | "standard"
    | "primary"
    | "success"
    | "information"
    | "error"
    | "disabled"
    | "onColor"
  >;
  family?: SingleChoiceArg<"_default" | "secondary">;
  lineHeight?: SingleChoiceArg<"_default" | "compact">;
  size?: SingleChoiceArg<"sm" | "md" | "lg">;
  weight?: SingleChoiceArg<"normal" | "light" | "medium">;
  align?: SingleChoiceArg<"left" | "center" | "right" | "justified">;
  reverseItemComponents?: SingleBooleanChoiceArg<"reverseItemComponents">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicListItem__RenderFunc(props: {
  variants: PlasmicListItem__VariantsArgs;
  args: PlasmicListItem__ArgsType;
  overrides: PlasmicListItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "contentColor",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.contentColor
      },
      {
        path: "family",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.family
      },
      {
        path: "lineHeight",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.lineHeight
      },
      {
        path: "size",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.size
      },
      {
        path: "weight",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.weight
      },
      {
        path: "align",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.align
      },
      {
        path: "reverseItemComponents",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.reverseItemComponents
      },
      {
        path: "iconColor",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.iconColor
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    mode: useMode(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  return (
    <div
      data-plasmic-name={"listItemBase"}
      data-plasmic-override={overrides.listItemBase}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_core_css.plasmic_tokens,
        plasmic_switch_css.plasmic_tokens,
        plasmic_badge_css.plasmic_tokens,
        plasmic_avatar_css.plasmic_tokens,
        plasmic_button_css.plasmic_tokens,
        plasmic_input_css.plasmic_tokens,
        plasmic_semantic_css.plasmic_tokens,
        plasmic_icon_css.plasmic_tokens,
        plasmic_menu_item_css.plasmic_tokens,
        plasmic_image_css.plasmic_tokens,
        plasmic_typography_css.plasmic_tokens,
        plasmic_content_css.plasmic_tokens,
        plasmic_headline_css.plasmic_tokens,
        plasmic_sub_headline_css.plasmic_tokens,
        plasmic_kicker_css.plasmic_tokens,
        plasmic_label_css.plasmic_tokens,
        plasmic_link_css.plasmic_tokens,
        plasmic_list_item_css.plasmic_tokens,
        plasmic_list_group_css.plasmic_tokens,
        plasmic_card_css.plasmic_tokens,
        plasmic_title_css.plasmic_tokens,
        sty.listItemBase,
        {
          [plasmic_core_css.global_mode_dark]: hasVariant(
            globalVariants,
            "mode",
            "dark"
          )
        }
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"listItemStack"}
        data-plasmic-override={overrides.listItemStack}
        hasGap={true}
        className={classNames(projectcss.all, sty.listItemStack, {
          [sty.listItemStackreverseItemComponents]: hasVariant(
            $state,
            "reverseItemComponents",
            "reverseItemComponents"
          ),
          [sty.listItemStacksize_lg]: hasVariant($state, "size", "lg"),
          [sty.listItemStacksize_sm]: hasVariant($state, "size", "sm")
        })}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"listItemIconStack"}
          data-plasmic-override={overrides.listItemIconStack}
          hasGap={true}
          className={classNames(projectcss.all, sty.listItemIconStack, {
            [sty.listItemIconStackiconColor_primary]: hasVariant(
              $state,
              "iconColor",
              "primary"
            ),
            [sty.listItemIconStackiconColor_secondary]: hasVariant(
              $state,
              "iconColor",
              "secondary"
            ),
            [sty.listItemIconStackiconColor_success]: hasVariant(
              $state,
              "iconColor",
              "success"
            ),
            [sty.listItemIconStacklineHeight__default]: hasVariant(
              $state,
              "lineHeight",
              "_default"
            ),
            [sty.listItemIconStacksize_lg]: hasVariant($state, "size", "lg"),
            [sty.listItemIconStacksize_sm]: hasVariant($state, "size", "sm"),
            [sty.listItemIconStackweight_normal]: hasVariant(
              $state,
              "weight",
              "normal"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <FaBarssvgIcon
                className={classNames(projectcss.all, sty.svg__hfOhK)}
                role={"img"}
              />
            ),

            value: args.children,
            className: classNames(sty.slotTargetChildren, {
              [sty.slotTargetChildreniconColor_disabled]: hasVariant(
                $state,
                "iconColor",
                "disabled"
              ),
              [sty.slotTargetChildreniconColor_error]: hasVariant(
                $state,
                "iconColor",
                "error"
              ),
              [sty.slotTargetChildreniconColor_information]: hasVariant(
                $state,
                "iconColor",
                "information"
              ),
              [sty.slotTargetChildreniconColor_onColor]: hasVariant(
                $state,
                "iconColor",
                "onColor"
              ),
              [sty.slotTargetChildreniconColor_primary]: hasVariant(
                $state,
                "iconColor",
                "primary"
              ),
              [sty.slotTargetChildreniconColor_secondary]: hasVariant(
                $state,
                "iconColor",
                "secondary"
              ),
              [sty.slotTargetChildreniconColor_standard]: hasVariant(
                $state,
                "iconColor",
                "standard"
              ),
              [sty.slotTargetChildreniconColor_success]: hasVariant(
                $state,
                "iconColor",
                "success"
              )
            })
          })}
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"listItemContentStack"}
          data-plasmic-override={overrides.listItemContentStack}
          hasGap={true}
          className={classNames(projectcss.all, sty.listItemContentStack, {
            [sty.listItemContentStacksize_lg]: hasVariant($state, "size", "lg"),
            [sty.listItemContentStacksize_sm]: hasVariant($state, "size", "sm")
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mZaWi
                )}
              >
                {"List Item"}
              </div>
            ),
            value: args.listContentSlot,
            className: classNames(sty.slotTargetListContentSlot, {
              [sty.slotTargetListContentSlotalign_center]: hasVariant(
                $state,
                "align",
                "center"
              ),
              [sty.slotTargetListContentSlotalign_justified]: hasVariant(
                $state,
                "align",
                "justified"
              ),
              [sty.slotTargetListContentSlotalign_left]: hasVariant(
                $state,
                "align",
                "left"
              ),
              [sty.slotTargetListContentSlotalign_right]: hasVariant(
                $state,
                "align",
                "right"
              ),
              [sty.slotTargetListContentSlotcontentColor_disabled]: hasVariant(
                $state,
                "contentColor",
                "disabled"
              ),
              [sty.slotTargetListContentSlotcontentColor_emphasis]: hasVariant(
                $state,
                "contentColor",
                "emphasis"
              ),
              [sty.slotTargetListContentSlotcontentColor_error]: hasVariant(
                $state,
                "contentColor",
                "error"
              ),
              [sty.slotTargetListContentSlotcontentColor_helper]: hasVariant(
                $state,
                "contentColor",
                "helper"
              ),
              [sty.slotTargetListContentSlotcontentColor_information]:
                hasVariant($state, "contentColor", "information"),
              [sty.slotTargetListContentSlotcontentColor_onColor]: hasVariant(
                $state,
                "contentColor",
                "onColor"
              ),
              [sty.slotTargetListContentSlotcontentColor_primary]: hasVariant(
                $state,
                "contentColor",
                "primary"
              ),
              [sty.slotTargetListContentSlotcontentColor_secondary]: hasVariant(
                $state,
                "contentColor",
                "secondary"
              ),
              [sty.slotTargetListContentSlotcontentColor_standard]: hasVariant(
                $state,
                "contentColor",
                "standard"
              ),
              [sty.slotTargetListContentSlotcontentColor_success]: hasVariant(
                $state,
                "contentColor",
                "success"
              ),
              [sty.slotTargetListContentSlotfamily_secondary]: hasVariant(
                $state,
                "family",
                "secondary"
              ),
              [sty.slotTargetListContentSlotlineHeight__default]: hasVariant(
                $state,
                "lineHeight",
                "_default"
              ),
              [sty.slotTargetListContentSlotlineHeight_compact]: hasVariant(
                $state,
                "lineHeight",
                "compact"
              ),
              [sty.slotTargetListContentSlotsize_lg]: hasVariant(
                $state,
                "size",
                "lg"
              ),
              [sty.slotTargetListContentSlotsize_sm]: hasVariant(
                $state,
                "size",
                "sm"
              ),
              [sty.slotTargetListContentSlotweight_light]: hasVariant(
                $state,
                "weight",
                "light"
              ),
              [sty.slotTargetListContentSlotweight_medium]: hasVariant(
                $state,
                "weight",
                "medium"
              )
            })
          })}
        </Stack__>
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  listItemBase: [
    "listItemBase",
    "listItemStack",
    "listItemIconStack",
    "listItemContentStack"
  ],
  listItemStack: ["listItemStack", "listItemIconStack", "listItemContentStack"],
  listItemIconStack: ["listItemIconStack"],
  listItemContentStack: ["listItemContentStack"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  listItemBase: "div";
  listItemStack: "div";
  listItemIconStack: "div";
  listItemContentStack: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicListItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicListItem__VariantsArgs;
    args?: PlasmicListItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicListItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicListItem__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicListItem__ArgProps,
          internalVariantPropNames: PlasmicListItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicListItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "listItemBase") {
    func.displayName = "PlasmicListItem";
  } else {
    func.displayName = `PlasmicListItem.${nodeName}`;
  }
  return func;
}

export const PlasmicListItem = Object.assign(
  // Top-level PlasmicListItem renders the root element
  makeNodeComponent("listItemBase"),
  {
    // Helper components rendering sub-elements
    listItemStack: makeNodeComponent("listItemStack"),
    listItemIconStack: makeNodeComponent("listItemIconStack"),
    listItemContentStack: makeNodeComponent("listItemContentStack"),

    // Metadata about props expected for PlasmicListItem
    internalVariantProps: PlasmicListItem__VariantProps,
    internalArgProps: PlasmicListItem__ArgProps
  }
);

export default PlasmicListItem;
/* prettier-ignore-end */
